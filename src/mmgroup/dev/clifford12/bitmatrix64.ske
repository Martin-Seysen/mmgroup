/** @file bitmatrix64.c
  File ``bitmatrix64.c`` contains  functions for computing with
  bit matrices. A bit matrix of up to 64 columns is stored in
  an array of integers of type ``uint64_t``.  If matrix ``m`` is
  stored in the array ``a`` then entry ``m[i,j]`` is given
  by bit ``j`` of the entry ``a[i]`` of the array ``a``. 
  Here bit ``j`` has valence \f$2^j\f$.
  
  In functions dealing with bit matrices we always give the number
  of rows as a parameter. In some functions we also give the 
  number of columns. In other functions we assume that there
  are 64 coumns, with unused columns ignored.
*/

/*************************************************************************
** External references 
*************************************************************************/

/// @cond DO_NOT_DOCUMENT 
#include <string.h>
#define CLIFFORD12_INTERN
#include "clifford12.h"
/// @endcond  


// %%EXPORT_KWD CLIFFORD12_API

// %%GEN h

/// @cond DO_NOT_DOCUMENT 


// %%GEN ch
#ifdef __cplusplus
extern "C" {
#endif
// %%GEN c


/*************************************************************************
*** Basic definitions
*************************************************************************/

/// @cond DO_NOT_DOCUMENT 



// If ERROR_POOL is defined then function xsp2co1_error_pool() can
// read data from an "error pool" that contains debug information
// for certain functions after calling them.
#define ERROR_POOL

// Number of entries of type uit64_t of the ERROR_POOL
#define LEN_ERROR_POOL 20


/// @endcond 


/*************************************************************************
*** Using a pool for recording errors (for debugging)
*************************************************************************/


/// @cond DO_NOT_DOCUMENT 

#ifdef  ERROR_POOL
static uint64_t error_pool[LEN_ERROR_POOL];
#endif

/**
@brief Used for debugging only
*/
// %%EXPORT px
uint32_t bitmatrix64_error_pool(uint64_t *dest, uint32_t length)
{
  #ifdef ERROR_POOL
    uint32_t i;
    if (length > LEN_ERROR_POOL) length = LEN_ERROR_POOL;
    for (i = 0; i < length; ++i) dest[i] = error_pool[i];   
    return length;
  #else
    return 0;  // Dummy if  ERROR_POOL is not #defined.
  #endif   // #ifdef  ERROR_POOL 
}

/// @endcond 


/*************************************************************************
*** Static auxuliary functions
*************************************************************************/

/// @cond DO_NOT_DOCUMENT 

/**
 @brief Returns the bit weight of a 64-bit integer ``v``.      
*/ 
static inline uint32_t bw64(uint64_t v)
{
   v = (v & 0x5555555555555555ULL) + ((v & 0xaaaaaaaaaaaaaaaaULL) >> 1); 
   v = (v & 0x3333333333333333ULL) + ((v & 0xccccccccccccccccULL) >> 2);
   v = (v + (v >> 4)) & 0xf0f0f0f0f0f0f0fULL;
   v = (v + (v >> 8)) &  0xff00ff00ff00ffULL;
   v = (v + (v >> 16)) &   0xffff0000ffffULL;
   return (uint32_t)((v + (v >> 32)) & 0x7f); 
}    

/**
 @brief Returns the bit length of a 64-bit integer ``v``.      
*/ 
static inline uint32_t bitlen64(uint64_t v)
{
   uint32_t result = 0;
   if (v & 0xffffffff00000000ULL) {result += 32; v >>= 32;}
   if (v & 0xffff0000UL) {result += 16; v >>= 16;}
   if (v & 0xff00) {result += 8; v >>= 8;}
   if (v & 0xf0) {result += 4; v >>= 4;}
   return result + (uint32_t)((0x4444444433332210ULL >> (v << 2)) & 0xf); 
}

/// @endcond 


/*************************************************************************
*** Bit matrix transposition
*************************************************************************/


/**
   @brief Transpose a bit matrix
   
   Here ``m1`` is an ``i`` times ``j`` bit matrix. Here bit ``m1[m,n]``
   is given by ``(m1[m] >> n) & 1``. The function writes the transposed
   bit matrix of ``m1`` to ``m2``.
*/
// %%EXPORT px
int32_t bitmatrix64_t(uint64_t *m1, uint32_t i, uint32_t j, uint64_t *m2)
{
    uint64_t v;
    uint32_t i1, j1;
    if (i > 64 || j > 64) return -5;
    for (j1 = 0; j1 < j; ++j1) {
        v = 0;
        for (i1 = 0; i1 < i; ++i1) v |= ((m1[i1] >> j1) & 1) << i1;
        m2[j1] = v;
    }
    return 0;
}



/*************************************************************************
*** Echelonize a bit matrix 
*************************************************************************/

/**
   @brief Convert bit matrix ``m`` to reduced row echelon form.

   Matrix ``m`` has ``i`` rows. Here we assume that the leading bit 
   of a row of matrix ``m`` is the most significant bit in that row.
   For echelonizing ``m``, we pivot over nolumns
   ``j0-1,...,j0-n`` in that order, ignoring the other columns.
   We perform row operations (on all possible columns 0,...,63) 
   for changing matrix ``m``.
   
   The function returns the number of rows in the (echelonized)
   matrix ``m`` that have a nonzero bit in at least one of the
   pivoted columns.
*/
// %%EXPORT px
uint32_t bitmatrix64_echelon_h(uint64_t *m, uint32_t i, uint32_t j0, uint32_t n)
{

    int_fast32_t row_pos = 0, col, k1, k2;
    uint64_t v, col_mask ;
    if (j0 > 64) j0 = 64;
    if (n > j0) n = j0;
    if (i == 0 || n == 0) return 0;
    for (col = (int_fast32_t)j0 - 1; col >= (int_fast32_t)(j0 - n); --col) {
        col_mask = ONE << col;
        for (k1 = (int_fast32_t)i - 1; k1 >= row_pos; --k1) {
            if (m[k1] &  col_mask) {
                v = m[k1];
                for (k2 = k1 - 1; k2 >= 0; --k2) {
                    m[k2] ^= (m[k2] & col_mask) ? v : 0;
                }
                m[k1] = m[row_pos]; m[row_pos++] = v;
            }
        }
    }   
    return row_pos;    
}


/**
   @brief Convert bit matrix ``m`` to reduced row echelon form.

   Matrix ``m`` has ``i`` rows. Here we assume that the leading bit 
   of a row of matrix ``m`` is the least significant bit in that row.
   For echelonizing ``m``, we pivot over columns
   ``j0,...,j0+n-1`` in that order, ignoring the other columns.
   We perform row operations (on all possible columns 0,...,63) 
   for changing matrix ``m``.
   
   The function returns the number of rows in the (echelonized)
   matrix ``m`` that have a nonzero bit in at least one of the
   pivoted columns.
*/
// %%EXPORT px
uint32_t bitmatrix64_echelon_l(uint64_t *m, uint32_t i, uint32_t j0, uint32_t n)
{

    int_fast32_t row_pos = 0, col, k1, k2;
    uint64_t v, col_mask;
    if (j0 >= 64 || i == 0 || n == 0) return 0;
    if (j0 + n > 64) n = 64 - j0;
    for (col = j0; col < (int_fast32_t)(j0 + n); ++col) {
        col_mask = ONE << col;
        for (k1 = (int_fast32_t)i - 1; k1 >= row_pos; --k1) {
            if (m[k1] &  col_mask) {
                 v = m[k1];
                 for (k2 = k1 - 1; k2 >= 0; --k2) {
                     m[k2] ^= (m[k2] & col_mask) ? v : 0;
                 }
                 m[k1] = m[row_pos]; m[row_pos++] = v;
            }
        }
    }     
    return row_pos;    
}


/*************************************************************************
*** Intersection of row spaces of two bit matrices
*************************************************************************/

/// @cond DO_NOT_DOCUMENT 

static int32_t restore_cap_h(uint64_t *ma, uint64_t *m, 
    uint64_t rows_used,  uint64_t rows_cap, int32_t max_rows)
{
    int i_max, n_used, n_cap, i, row = 0, row_h;
    i_max = bitlen64(rows_used);
    n_used = bw64(rows_used);
    rows_cap &= rows_used;
    n_cap = bw64(rows_cap);
    row_h = n_used - n_cap;
  #ifdef ERROR_POOL
     error_pool[18] =  i_max;
     error_pool[19] =  row_h;
  #endif
    if (max_rows < n_used) return ERR_QSTATE12_INTERN_PAR; 
    for (i = 0; i < i_max; ++i) if ((rows_used >> i) & 1) {
        if ((rows_cap >> i) & 1)  m[row_h++] = ma[i];
        else  m[row++] = ma[i];
    } 
    return n_cap;
}

/// @endcond  


/**
   @brief Compute intersection of row spaces of two bit matrices
 
   Bit matrix ``m1`` has ``i1`` rows, and bit matrix ``m2`` has ``i2`` rows.
   Both matrices, ``m1`` and ``m2``, must be given in reduced echelon form
   in the sense of function ``bitmatrix64_echelon_h``.

   The function changes  ``m1`` and ``m2`` using row operations in such a
   way that the lower rows of ``m1`` and ``m2`` contain the intersection
   of the rows spaces of the two matrices. For computing that intersection
   we consider only columns ``j0-1,...,j0-n`` of matrices ``m1`` and ``m2``.
   However, we do each row operation on all possible columns ``63,...,0``.
   
   The function returns the dimension ``n_cap`` of the intersection
   of the row spaces of ``m1`` and ``m2``, ignoring all columns
   except for columns ``j0-1,...,j0-n``.
   
   Assume that the echelonized input matrices ``m1`` (and ``m2``) have 
   ``r1`` (and  ``r2``) leading rows that have at least one nonzero bit 
   in columns ``j0-1,...,j0-n``, respectively. Then the function changes
   the leading ``r1`` rows  of ``m1`` and the leading ``r2`` rows  of 
   ``m2`` only. These rows are changed in such a way that the last
   ``n_cap`` of these rows of the two matrices are equal in columns
   ``j0-1,...,j0-n``. So these last rows contain the intersection of
   the row spaces of ``m1`` and `m2``, ignoring all columns but   
   ``j0-1,...,j0-n``.
   
   Parameters ``j0`` and ``n`` must be the same  in this function, and 
   in the previous two calls to function ``bitmatrix64_echelon_h`` used 
   for echelonizing  matrices ``m1`` and ``m2``. This function computes 
   garbage in the arrays ``m1`` and ``m2``, unless both matrices, ``m1`` 
   and ``m2``, have been echelonized in that way before calling this 
   function.
   
   A negative return value ``n_cap`` means that at least one of the 
   input matrices ``m1`` and ``m2`` has not been echelonized correctly.
   This function may or may not detect an incorrect echelonization
   of an input matrix.
   
*/
// %%EXPORT px
int32_t bitmatrix64_cap_h(uint64_t *m1, uint64_t *m2, uint32_t i1, uint32_t i2, uint32_t j0, uint32_t n)
{
    int_fast32_t row_pos = 0, row_pos1 = 0, row_pos2 = 0, col, row, res;
    uint64_t b1, b2, v1, v2;
    uint64_t mask, row_used1 = 0, row_used2 = 0, row_cap = 0;
    uint64_t m1a[64], m2a[64];

    // Adjust ``j0`` and ``n`` to the maximal number of colums 
    if (j0 > 64) j0 = 64;
    if (n > j0) n = j0;
    if (n == 0) return 0;

    // Delete trailing zero row of ``m1`` and ``m2``.
    mask = (((ONE + ONE) << (n - 1)) - 1) << (j0 -n);
    while (i1 > 0 && (m1[i1 - 1] & mask) == 0) --i1;
    while (i2 > 0 && (m2[i2 - 1] & mask) == 0) --i2;
    // Return 0 if zero rows remaining for ``m1`` or ``m2``
    if (i1 == 0 || i2 == 0) return 0;
    
    // TODO: The main loop is yet to be commented!!!
    for (col = (int)j0 - 1; col >= (int)(j0 - n); --col) {
        b1 = row_pos1 < (int)i1 ? ((m1[row_pos1] >> col) & 1) : 0;
        b2 = row_pos2 < (int)i2 ? ((m2[row_pos2] >> col) & 1) : 0;
        row_used1 |= b1 << row_pos; row_used2 |= b2 << row_pos;

        if (b1) {
            if (b2) {
                m1a[row_pos] = m1[row_pos1++];
                m2a[row_pos] = m2[row_pos2++];
                row_cap |= ONE << row_pos;
                ++row_pos;
            } else { 
                m1a[row_pos] = v1 = m1[row_pos1++];
                for (row = row_pos - 1; row >= 0; --row) { 
                    m1a[row] ^= v1 &
                       (0 - ((row_cap >> row) & (m2a[row] >> col) & ONE));
                }       
                ++row_pos;
            }
        } else {
            if (b2) {
                m2a[row_pos] = v2 = m2[row_pos2++];
                for (row = row_pos - 1; row >= 0; --row) { 
                    m2a[row] ^= v2 &
                       (0 - ((row_cap >> row) & (m1a[row] >> col) & ONE));
                }       
                ++row_pos;
            } else {
                for (row = row_pos - 1; row >= 0; --row) { 
                    if (((m1a[row] ^ m2a[row]) >> col) & 
                        (row_cap >> row) &  ONE)  {
                            row_cap &= ~(ONE << row);
                            v1 = m1a[row]; v2 = m2a[row];
                            break;
                    }
                }
                for (--row; row >= 0; --row) { 
                    if (((m1a[row] ^ m2a[row]) >> col) & 
                        (row_cap >> row) &  ONE)  {
                            m1a[row] ^= v1; m2a[row] ^= v2;
                    }
                }       
            }
        } 
    }   
  #ifdef ERROR_POOL
    for (row = 0; row < 4; ++row) {
        error_pool[row] = m1a[row]; 
        error_pool[row+4] = m2a[row];
     }
     error_pool[8] =  row_used1;
     error_pool[9] =  row_used2;   
     error_pool[10] =  row_cap;
     error_pool[11] =  row_pos1;
     error_pool[12] =  row_pos2;
     error_pool[13] =  row_pos;
     error_pool[14] =  j0;
     error_pool[15] =  n;
     error_pool[16] =  i1;
     error_pool[17] =  i2;
  #endif
  
    // Restore reordered rows of ``m1`` and ``m2``
    res = restore_cap_h(m1a, m1, row_used1, row_cap, i1);
    if (res < 0) return res;
    return restore_cap_h(m2a, m2, row_used2, row_cap, i2);
}

/*************************************************************************
*** End of of C code
*************************************************************************/


//  %%GEN h
/// @endcond  
//  %%GEN c



// %%GEN ch
#ifdef __cplusplus
}
#endif




