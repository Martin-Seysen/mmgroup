/** @file leech2matrix.c

  File ``leech2matrix.c`` contains  functions for computing with
  matrices Leech lattice modulo 2. 
*/

/*************************************************************************
** External references 
*************************************************************************/

/// @cond DO_NOT_DOCUMENT 
#include <string.h>
#include "mat24_functions.h"
#define MMGROUP_GENERATORS_INTERN
#include "mmgroup_generators.h"
#define CLIFFORD12_INTERN
#include "clifford12.h"
/// @endcond  



// %%GEN h

/// @cond DO_NOT_DOCUMENT 


// %%GEN ch
#ifdef __cplusplus
extern "C" {
#endif
// %%GEN c



/*************************************************************************
*** Functions for bit matrices
*************************************************************************/







/**
 @brief Add an equation to a system of linear bit equations
 
 The idea behind this function is that an external process generates
 rows of a bit matrix with ``ncols`` columns, with ``0 < ncols <= 32``.
 This function checks such a row ``a`` and accepts it, if it linearly
 independent of all previously accepted rows. Thus at most ``ncols``
 rows can be accepted. The ``nrows`` already accepted rows are  stored
 in the array ``m``. The function returns  ``1`` if row ``a`` is
 accepted and ``0``  otherwise. A negative return value indicates
 an error. The size of the array ``m`` should be at least ``ncols``.
 
 Let ``A`` be the ``ncols`` times ``ncols`` matrix of all accepted
 rows ``a[i]``, ``0 <= i < ncols``; and let  ``I`` be the ``ncols``
 time ``ncols`` unit matrix. We left multiply ``A`` with a
 matrix ``T`` such that ``T * A = I``. Thus ``T = A**(-1)``.
 Technically, we perform row operations on the matrix ``A[:nrows]``
 containing the first ``nrows`` lines already accepted, such
 that ``T * A[:rnows]`` is in **reduced echelon form**. We also
 perform the same row operations on the unit matrix to obtain ``T``.
 We store ``T[:rnows]`` in columns ``0,...,ncols-1`` of matrix ``M``
 and ``T*A[:rnows]`` in columns ``ncols,...,2*ncols-1`` of
 matrix ``M``.
 
 One may use function ``leech2matrix_solve_eqn`` for solving a
 system of linear equations obtained in that way.
*/
// %%EXPORT px
int32_t leech2matrix_add_eqn(uint64_t *m, uint32_t nrows, uint32_t ncols, uint64_t a)
{
    // Our general strategy is to keep the matrix ``TA``in the upper
    // columns of ``m`` in reduced echelon form after the insertion  
    // of a vector ``a``. Therefore we apply row operations to ``TA``. 
    // When entring the i-th row, we also enter the i-th row of the
    // unit matrix ``I`` into the matrix stored in the lower ``ncols``
    // columns of ``m``. Then subsequent row operations apply to both,
    // the upper and the lower columns of matrix ``m``.

    uint_fast32_t row, col;       // Counters for rows and columns of ``TA``
    uint_fast32_t a_row = nrows;  // Row where to insert the (pivoted) ``a``
    uint64_t mask = ONE << ncols; // Mask for column ```col`` of ``TA``
    uint64_t a_mask = 0 - ONE;    // Mask for lowest bit of (pivoted) ``a``,
                                  // (-1) means 'no such bit found'
    // Check buffer overflow
    if (ncols > 32 || nrows > ncols) return ERR_QSTATE12_BUFFER_OVFL;
 
    // Shift vector ``a`` into the position for entering it into ``TA``.
    // Store row ``nrows`` of the unit matrix in the lower columns of ``a``.
    a = ((a & ((ONE << ncols) - 1)) << ncols) | (ONE << nrows);
 
    // Run through the columns of ``TA``. If a row of ``TA`` has a 
    // lowest bit in that column then pivot ``a`` with that row.
    // If ``a`` has a lowest bit set in that column (after pivoting)
    // then set ``a_mask`` appropriately to indicate that column.
    for (col = row = 0; col < ncols && row < nrows; ++col) {
        if (m[row] & mask) {
            a ^= (a & mask) ? m[row] : 0; 
            ++row;
        } 
        else if (a & mask & a_mask) {
            a_row = row; a_mask = mask;
        }            
        mask <<= 1;        
    }
    // All rows of ``TA`` done. Proceed with remaining columns as above.
    for ( ; col < ncols && a_mask == (0 - ONE); ++col) {
        if (a & mask) a_mask = mask; 
        mask <<= 1;        
    }
    
    // Return 0 if no bit is set in the (pivoted) ``a``.
    if (a_mask == (0 - ONE)) return 0;
    
    // Insert the pivoted ``a`` into the correct row of ``TA``
    for (row = nrows; row > a_row; --row)  m[row] = m[row-1];
    m[a_row] = a;
    
    // Pivot the lower rows of ``TA`` with ``a``.
    for (row = 0; row < a_row; ++row) {
        m[row] ^=  (m[row] & a_mask) ? a : 0;
    }    
    return 1;     
}



/**
 @brief Solve a system of linear bit equations
 
 Let ``A`` be a nonsingular  ``ncols`` times ``ncols`` bit matrix
 stored in the array ``m`` in the special form as described in 
 function ``leech2matrix_add_eqn``.
 
 The function returns the solution ``w`` of the equation
 ``w * A = v``.

 Caution:

 Here ``m`` is of of type ``uint32_t *``, but the corresponding
 parameter in function ``leech2matrix_add_eqn`` is of type
 ``uint64_t *``. This simplifies the use of this function in
 most pplications. 
  
*/
// %%EXPORT px
uint32_t leech2matrix_solve_eqn(uint32_t *m, uint32_t ncols, uint64_t v)
{
    uint_fast32_t row = 0;
    uint64_t mask = ONE, w = 0;
    
    for (row = 0; row < ncols; ++row) {
        w ^=  (v & mask) ? m[row] : 0; 
        mask <<= 1;
    }
    return  (uint32_t)(w & (mask - 1));     
}






/*************************************************************************
** Basis of a subspace of the Leech lattice modulo 2
*************************************************************************/

/// @cond DO_NOT_DOCUMENT 

/** @brief  Workhorse for function ``leech2_matrix_basis``

  This function does the job of function ``leech2_matrix_basis``
  except for the final echelonization of the basis.
*/
static inline uint32_t 
get_leech2_basis(uint32_t *v2, uint32_t n, uint64_t *basis, uint32_t d)
{
    uint32_t i, j, w, k = 0;
    uint8_t pos[24];

    // Compute a basis of the space generated by  v2[0],...,v2[n-1]  in 
    // basis[0],...,basis[k-1]. Store index of the least significant
    // bit of the i-th basis vector in pos[i].
    // Put mask[i] = 1 << pos[i].
    // Set bit m in 'bitmask' if m is an entry in array pos[0,...,k-1].
    for (i = 0; i < n; ++i) {
        w = v2[i] & 0xffffffUL;
        for (j = 0; j < k; ++j) {
             w ^= (0 - ((w >> pos[j]) & 1UL)) & basis[j];
        }
        if (w == 0) continue;
        j = w & (0 - w); 
        pos[k] = (uint8_t)(mat24_def_lsbit24_pwr2(j));
        basis[k] = w;
        if (++k >= d) break;
    }
    return k;    
}


/// @endcond 


/** @brief  Subspace generated by vectors of Leech lattice modulo 2

  Compute a basis of the subspace of the Leech lattice modulo 2
  generated by the vectors ``v2[0],...,v2[n-1]``.

  The function returns the dimension ``k`` of that subspace and
  computes a basis of that subspace in ``basis[i], 0 <= i < k``.

  Here ``d`` must be an upper bound for the dimension ``k``.
  If ``k`` is unknown, one should put ``d = 24``.

  Bits 23,...,0  of the output matrix are echelonized in a special
  way.  Here the columns are processed in the order:

  11, 22, 21, ..., 13, 12, 10, 9, ..., 1, 0, 23.

  One of the advantages of this echelonization is that the
  vector \f$\Omega\f$ (encoded as 0x800000) will occur in the
  basis if it is in the subspace, and that there are many even
  vectors (i.e. vectors orthogonal to \f$\Omega\f$) in the basis.
*/
// %%EXPORT px
uint32_t leech2_matrix_basis(uint32_t *v2, uint32_t n, uint64_t *basis, uint32_t d)
{
    uint32_t dim = get_leech2_basis(v2, n, basis, d);

    // Echelonize the final result as documented above.
    bitmatrix64_xch_bits(basis, dim, 12, 0x800);
    bitmatrix64_rot_bits(basis, dim, 1, 12,0);
    bitmatrix64_echelon_h(basis, dim, 24, 24);
    bitmatrix64_rot_bits(basis, dim, 11, 12,0);
    bitmatrix64_xch_bits(basis, dim, 12, 0x800);
    return dim;    
}



/*************************************************************************
*** Orthogonal complement in Leech lattice mod 2
*************************************************************************/


/**
   @brief Compute standard orthogonal complement in Leech lattice mod 2

   Let \f$A = a_0\ldots, a_{k-1}\f$ be a matrix of \f$k\f$ vectors
   in the Leech lattice mod 2 stored in the array ``a``. The function
   returns a basis  \f$B = b_0\ldots, b_{23}\f$ of the Leech lattice
   mod 2 in the array ``b``, and it returns a number \f$m\f$ such that
   the vectors \f$b_m\ldots, b_{23}\f$ are a basis of the orthogonal
   complement of the space generated by the row vectors of \f$A\f$.

   If the vectors  \f$(a_0\ldots, a_{k-1})\f$ are linear independent
   then the function returns \f$m = k\f$, and vector \f$b_i, i < k\f$
   is orthogonal to all vectors  \f$a_j\f$ with \f$j \neq i\f$.

   The basis \f$B = b_0\ldots, b_{23}\f$ is stored in the array ``b``.

   We require \f$k \leq 24\f$. The function returns \f$m \geq 0\f$
   in case of success a negative value in case of failure.
*/
// %%EXPORT px
int32_t leech2_matrix_orthogonal(uint64_t *a, uint64_t *b, uint32_t k)
{
   uint64_t x;
   uint32_t i, m;

   if (k > 24) return ERR_QSTATE12_PARAM;

   // We store a 24 times k matrix Bh in columns 24,...,24+k-1 of 
   // the array b and a 24 times 24 matrix Bl in columns 0,...,23
   // of the array b.

   // Put Bl = A^T (with A^T the transposed matrix of A)
   bitmatrix64_t(a, k, 24, b);

   // Let Q be the scalar product matrix for the Leech lattice mod 2.
   // Put Bh = Q * A^T, i.e. exchange row i of A^T with row i+12.
   for (i = 0; i < 12; ++i) {
       x = b[i]; b[i] = b[i+12] << 24; b[i+12] = x << 24;
   }

   // Store the unit matrix in Bl 
   for (i = 0; i < 24; ++i)  b[i] |= 1ULL << i;

   // Echelonize Bh. This corresponds to left multiplication with a
   // nonsingular matrix B. W also multiply Bl (containing the unit
   // matrix) with B. So we have  Bl = B, Bh = B * Q * A^T,  and Bh 
   // is echelonized, containing m nonzero rows  and 24 - m zero rows. 
   // Thus B is the result, with the orthogonal complement of A in 
   // rows m,...,23 of B.  
   //
   // Remark: If the rows of A are linear independent then the upper
   //         k rows of  B * Q * A^T  form a unit matrix.
   m = bitmatrix64_echelon_l(b, 24, 24, k);

   // Output B = Bl and return m
   for (i = 0; i < 24; ++i) b[i] &= 0xffffffUL;
   return m;
}


/*************************************************************************
** Radical of a subspace of the Leech lattice modulo 2
*************************************************************************/

/** @brief Radical of subspace generated by vectors of Leech lattice mod 2

  Compute the radical of the subspace of the Leech lattice modulo 2
  generated by the vectors ``v2[0],...,v2[n-1]``. Here the radical
  is the intersection of the space generated by ``v2[0],...,v2[n-1]``
  with the orthogonal complement of that space.

  Input parameters ``v2, n,`` and ``d`` are as in
  function ``leech2_matrix_basis``. A basis of the radical
  of the space is computed in ``basis``. The basis is echelonized
  as in function ``leech2_matrix_basis``. The function returns the
  dimension ``k`` of radical spanned by that basis.
*/
// %%EXPORT px
uint32_t leech2_matrix_radical(uint32_t *v2, uint32_t n, uint64_t *basis, uint32_t d)
{
    uint64_t span[24], ortho[24];
    int_fast32_t dim, i, res;

    dim = get_leech2_basis(v2, n, span, d);
    if (dim < 0) return dim;
    leech2_matrix_orthogonal(span, ortho, dim);
    bitmatrix64_echelon_h(span, dim, 24, 24);
    bitmatrix64_echelon_h(ortho + dim, 24 - dim, 24, 24);
    res = bitmatrix64_cap_h(span, ortho + dim, dim, 24 - dim, 24, 24);
    if (res < 0) return res;
    for (i = 0; i < res; ++i) basis[i] = span[i + dim - res];

    // Echelonize the final result as documented above.
    bitmatrix64_xch_bits(basis, res, 12, 0x800);
    bitmatrix64_rot_bits(basis, res, 1, 12,0);
    bitmatrix64_echelon_h(basis, res, 24, 24);
    bitmatrix64_rot_bits(basis, res, 11, 12,0);
    bitmatrix64_xch_bits(basis, res, 12, 0x800);
    return res;
}

/*************************************************************************
** List vectors in a subspace of the Leech lattice modulo 2
*************************************************************************/


/** @brief List vectors in a subspace of the Leech lattice modulo 2

  The function computes all ``2**dim`` vectors of the subspace ``V`` 
  of the Leech lattice modulo 2 given by the basis

  ``basis[0], ..., basis[dim - 1]``  .

  These vectors are written into the array ``v2``. The function
*/
// %%EXPORT px
uint32_t leech2_matrix_expand(uint64_t *basis, uint32_t dim, uint32_t *v2)
{
    int_fast32_t i, j, len = 1;
    v2[0] = 0;
    for (i = dim - 1; i >= 0; --i) {
         uint32_t w = (uint32_t)(basis[i]) & 0xffffff;
         for (j = 0; j < len; ++j) v2[len + j] = w ^ v2[j];
         len += len;
    } 
    return len;
}




/*************************************************************************
*** End of of C code
*************************************************************************/


//  %%GEN h
/// @endcond  
//  %%GEN c



// %%GEN ch
#ifdef __cplusplus
}
#endif




