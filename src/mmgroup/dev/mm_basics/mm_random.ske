
/** @file mm_random.c

This module is deprecatiod an no longer in use!!!!

A fast random generator for the representation of the monster
group is provided in C. This generator supports very fast
generation of long random vectors of integers modulo ``p``
for ``p <= 256``.

The seed for such a random generator is given by an array of type
``uint8_t seed[MM_RNG_SIZE]``. In this version we have
``MM_RNG_SIZE = 266``.

The function ``mm_rng_seed(uint8_t *seed, ...)`` fills an existing
array ``seed`` of that type with seed data. See description of
that function for details.

The function
``mm_rng_gen_modp(uint32_t p, uint8_t *seed, uint8_t *out, uint32_t len)``
writes ``len`` uniform random numbers ``x_i`` with ``0 <= x_i < p``
to the array referred by the pointer ``out``.
Here ``1 < p <= 256`` must hold.

This function is optimized for generating large random vectors
with, say, ``len >= 1000``, as required for the representation of
the monster. 

Internal operation.

We use the RC4 random generator which generates bytes in a fast
and secure manner. The RC4 random generator also initializes a
63-bit LFSR. For generating a random number modulo ``p``, a byte 
is taken from the RC4 generator and it is mixed with 48 bits taken 
from the LFSR so that we obtain an uniform distributed random
number between 0 and 1. That number is multiplied by ``p`` and
the integral part of that product is returned. The LFSR is
shifted by 32 bytes in each step.

*/

#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <stdio.h>


#include "mm_basics.h"

// %%EXPORT_KWD MM_BASICS_API

// %%GEN ch
#ifdef __cplusplus
extern "C" {
#endif
// %%GEN c

//  %%GEN h
/// @cond DO_NOT_DOCUMENT 
//  %%GEN c


/******************************************************************
*** The following #defines determine which volatile input sources
*** are used for seeding the volatile random genertor number 0
******************************************************************/


/// @cond DO_NOT_DOCUMENT 

#define INT_BITS  %{INT_BITS} // must be 32 of 64

// The following funtions are standard C functions.
// They should usually be available on any operating system
#define HAS_TIME  // function time() is present if #defined
#define HAS_CLOCK // function clock() is present if #defined
#define HAS_RAND  // function rand() is present if #defined


// __sync_fetch_and_add is avaibale in GNU C  only
#ifdef __GNUC__
#define HAS_SYNC_FETCH_AND_ADD
#endif


#if (defined  __GNUC__)
#define HAS_GETPID
#include <unistd.h>
#include <sys/types.h>
static inline int my_getpid(void)
{
    return (int)(getpid());
}
#elif  (defined _MSC_VER && defined _WIN32)
#define HAS_GETPID
#include <process.h>
static inline my_getpid(void)
{
    return (int)(_getpid());
}
#endif




#if (defined HAS_TIME) | (defined HAS_CLOCK)
#include <time.h>
#endif

static volatile  int call_number;

/// @endcond  


// %%GEN h
#define MM_RNG_SIZE 266
// %%GEN c


/*****************************************************************************
*** Expanding the seeding data to a 256-bit RC4 key
*****************************************************************************/

/// @cond DO_NOT_DOCUMENT 


static void mm_rng_expand_key(uint32_t no, uint8_t *key, uint32_t len, uint8_t *res)
// Expand seeding data to a 256-bit RC4 key
// The input for the seeding process is a generator number 'no' of 
// type uint32_t, and an optional byte array 'key' of length 'len'.
// The function compute a 256-byte string from these input data and
// stores the result in the array 'res'. 
//
// In case no = 0, the some volatile input, such as the time is entered
// into the result. In case no > 0 we compute a repreoducible result.
// At most 250 bytes of the input key will be used. In case no=0
// fewer input bytes may be used.
//
// Some tricks are used to avoid periods dividing 256 in the output.  
{
    uint_fast32_t i, j, rlen;
    for (i = 0; i < 4; ++i) res[i] = (uint8_t)(no >> (i << 3));
    len = len > 250 ? 250 : len;
    res[4] = (uint8_t)(len + 1);
    rlen =  5;
    if (no == 0) {
       {
          int k;
          #ifdef HAS_SYNC_FETCH_AND_ADD
             k = __sync_fetch_and_add(&call_number, 1); 
          #else
             k = ++call_number;
          #endif
          memcpy(res + 5, &k, sizeof(k));
          rlen = 5 + sizeof(k);
       }
       #ifdef HAS_TIME
       {
          time_t tm;
          time(&tm);
          memcpy(res + rlen, &tm, sizeof(tm));
          rlen += sizeof(tm); 
       }
       #endif
       #ifdef HAS_CLOCK
       {
          clock_t clk = clock();
          memcpy(res + rlen, &clk, sizeof(clk));
          rlen += sizeof(clk);
       } 
       #endif
       #ifdef HAS_RAND
       {
          int rnd = rand();
          memcpy(res + rlen, &rnd, sizeof(rnd));
          rlen += sizeof(rnd);
       } 
       #endif
       #ifdef  HAS_GETPID
       {
          int rnd = my_getpid();
          memcpy(res + rlen, &rnd, sizeof(rnd));
          rlen += sizeof(rnd);
       }
       #endif
       if (len > 255 - rlen) len = 255 - rlen;
    }
    for (i = 1; i < len; ++i) res[i + rlen] = key[i];
    len += rlen; 
    // We want the length to be odd
    if ((len & 1) == 0) res[++len] = 0; 
    for (i = len; i < 256 - len; i += len) {
       for (j = 0; j < len; ++j) 
          res[i + j] = (uint8_t)((i + res[j]) & 0xff);
    }
    len = 256 - i;
    for (j = 0; j < len; ++j) 
       res[i + j] = (uint8_t)((i + res[j]) & 0xff);
    // for (i=0;i<256;++i) printf("%02x ", res[i]);printf("\n\n");
}

/// @endcond  


/*****************************************************************************
*** Seeding the random generator
*****************************************************************************/

/// @cond DO_NOT_DOCUMENT 

#define POS_I 256      // position of counter i for RC4 generator 
#define POS_J 257      // position of counter j for RC4 generator 
#define POS_LFSR 258   // position of 63-bit LFSR (8 bytes long)

/// @endcond  


/**
   @brief Seed the random generator

   Seed the random generator in the variable ``seed`` of
   type ``uint8_t[MM_RNG_SIZE]``. Inputs are:

   ``no``:    Number of the random generator.

   ``key``:   An array of ``len`` data bytes that enter into the seed

    In case ``no = 0`` we seed a volatile random generator from the
    time, and also from other random input, if supported by the os.
    For any other value of ``no`` we seed a reproducible generator.
     
    At most 250 bytes from the input ``key`` are used.

*/
// %%EXPORT px
void mm_rng_seed(uint8_t *seed, uint32_t no, uint8_t *key, uint32_t len)
{
   uint_fast32_t i, j, temp, sum;
   uint8_t ekey[256];
 
   // Expand the given key data to the input key stream ekey
   mm_rng_expand_key(no, key, len, ekey); 
 
   //Initialize seed array with a fixed permutation
   for(i = 0; i < 256; i++) seed[i] = (uint8_t)(3 * i);
 
   // Initialize with expanded key for 256 iterations
   for(i = j = 0; i < 256; i++)
   {
      // Randomize the permutations using the expanded key
      j = (j + seed[i] + ekey[i]) & 0xff;

      //Swap the values of seed[i] and seed[j]
      temp = seed[i];
      seed[i] = seed[j];
      seed[j] = (uint8_t)temp;
   }
 
   // Discard the first 256 bytes of the RC4 generator
   for (i = 0; i < 256; ++i) {

      // adjust index
      j = (j + seed[i]) & 0xff;
 
      //Swap the values of seed[i] and seed[j]
      temp = seed[i];
      seed[i] = seed[j];
      seed[j] = (uint8_t)temp;
   }

   // Initialize the LFSR from the RC4 generator
   sum = 0;
   for (i = 0; i < 8; ++i) {
      // Adjust index
      j = (j + seed[i]) & 0xff;
 
      // Swap the values of seed[i] and seed[j]
      temp = seed[i];
      seed[i] = seed[j];
      seed[j] = (uint8_t)temp;

      // Store RC4 stream to the LFSR
      seed[POS_LFSR + i] = seed[(seed[i] + seed[j]) & 0xff];
      sum |= seed[POS_LFSR + i];
   }
   seed[POS_LFSR] &= 0xfe; // for 63-bit LFSR

   // Save counters i and j
   seed[POS_I] = (uint8_t)(i);
   seed[POS_J] = (uint8_t)(j);

   // Abuse RC4 seed to make sure that the LFSR is not zero
   if ((sum & 0xfe) == 0) {
      for (i = 0; i < 8; ++i) seed[i + POS_LFSR] ^= seed[i] & 0xfe;
   }  
   // for (i=0;i<266;++i) printf("%02x ", seed[i]); printf("\n\n");
}



/*****************************************************************************
*** Generating a random array of integers modulo p, p <= 256
*****************************************************************************/

/**
  @brief Generate random integers modulo a small number ``p``

  Generate an array of length ``len`` of random integers ``x``
  with ``0 <= x < p``. Here ``1 < p <= 256`` must hold.
 
  These random integers are written to the array referred by ``out``.

  Parameter ``seed`` points to the seed for the random generator.
  That seed must have been  created by function ``mm_rng_seed``.
  
  The function returns zero in case of success and a nonzero value
  otherwise.

*/
// %%EXPORT px
uint32_t mm_rng_gen_modp(uint32_t p, uint8_t *seed, uint8_t *out, uint32_t len)
{
   uint_fast8_t i, j, temp;                       // for RC4
   #if INT_BITS == 64
      uint_fast64_t l = 0, temp64;                // for LFSR
   #else
      uint_fast32_t h = 0, l = 0, temp32;         // for LFSR  
   #endif 

 
   // Restore LFSR from seed
   #if INT_BITS == 64
      for (i = 0; i < 8; ++i) {
         l += (uint_fast64_t)seed[POS_LFSR + i] << (i << 3);
      }
      l >>= 1;
   #else
      for (i = 0; i < 4; ++i) {
         l += (uint_fast32_t)seed[POS_LFSR + i] << (i << 3);
         h += (uint_fast32_t)seed[POS_LFSR + i + 4] << (i << 3);
      }
   #endif

   // Restore RC4 counters from seed
   i = seed[POS_I];
   j = seed[POS_J];
   if (p > 0 && p < 256) {
       // Random generation loop for 0 < p < 256
       while(len-- > 0)
       {
          // Adjust indices of RC4 generator
          i = (i + 1) &  0xff;
          j = (j + seed[i]) &  0xff;
     
          // Swap the values of seed[i] and seed[j]
          temp = seed[i];
          seed[i] = seed[j];
          seed[j] = temp;

          #if INT_BITS == 64
             // Update the LFSR
             temp64 = l >> 31;
             l = ((l & 0x7fffffff) << 32) ^ temp64 ^ (temp64 << 31);

             // Combine random output from RC4 and LFSR
             temp64 = seed[(seed[i] + seed[j]) & 0xff];
             temp64 = (temp64 << 40) + (l >> 15);
             temp64 = (temp64 & 0xffffffffffffULL) * p;
               
             // store random number < p to output stream
             *out++ = (temp64 >> 48) & 0xff;
          #else
             // Update the LFSR
             temp32 = h ^ l ^ (h >> 31);
             l = h << 1;
             h = temp32;

             // Combine random output from RC4 and LFSR
             temp32 = seed[(seed[i] + seed[j]) & 0xff];
             temp32 = (((temp32 << 16) + (h >> 8)) & 0xffffff) * p; 
             temp32 += ((((h & 0xff) << 16) + (l >> 16)) * p) >> 24;  
               
             // store random number < p to output stream
             *out++ = (temp32 >> 24) & 0xff;
          #endif
       }
   } else if (p == 256) {
       // Random generation loop for p == 256
       while(len-- > 0)
       {
          // Adjust indices of RC4 generator
          i = (i + 1) &  0xff;
          j = (j + seed[i]) &  0xff;
     
          // Swap the values of seed[i] and seed[j]
          temp = seed[i];
          seed[i] = seed[j];
          seed[j] = temp;

          #if INT_BITS == 64
             // Update the LFSR
             temp64 = l >> 31;
             l = ((l & 0x7fffffff) << 32) ^ temp64 ^ (temp64 << 31);

             // Combine random output from RC4 and LFSR
             temp64 = seed[(seed[i] + seed[j]) & 0xff];
             temp64 ^= l >> 55;
               
             // store random number < p to output stream
             *out++ = temp64 & 0xff;
          #else
             // Update the LFSR
             temp32 = h ^ l ^ (h >> 31);
             l = h << 1;
             h = temp32;

             // Combine random output from RC4 and LFSR
             temp32 = seed[(seed[i] + seed[j]) & 0xff];
             temp32 ^= h >> 24;  
               
             // store random number < p to output stream
             *out++ = temp32 & 0xff;
          #endif
       }  
   } else return (uint32_t)(0-1);
   
   // Restore RC4 counters to seed
   seed[POS_I] = i;
   seed[POS_J] = j;

   // Restore LFSR form seed
   #if INT_BITS == 64
      l <<= 1;
      for (i = 0; i < 8; ++i) 
         seed[POS_LFSR + i] = (l >> (i << 3)) & 0xff;
   #else
      for (i = 0; i < 4; ++i) {
         seed[POS_LFSR + i] = (l >> (i << 3)) & 0xff;
         seed[POS_LFSR + i + 4] = (h >> (i << 3)) & 0xff;
      }
   #endif
   return 0;
}




//  %%GEN h
/// @endcond 
//  %%GEN c


// %%GEN ch
#ifdef __cplusplus
}
#endif
//  %%GEN c


