
/** @file mat24_tables.c
 File ``mat24_tables.c`` contains tables that are used in the 
 file ``mat24_functions.c``.
*/



/*************************************************************************
** External references 
*************************************************************************/




#include <stdint.h>
#include <string.h>
#include "mat24_functions.h"




/*************************************************************************
*** Definitions
*************************************************************************/




// %%GEN h

/**
 @def MAT24_ORDER 
 @brief Order of Mathieu group ``Mat24``. This is equal to 244823040. 
*/
#define MAT24_ORDER 244823040 // Order of Mathieu group Mat24


/**
 @def MAT24_SUBOCTAD_WEIGHTS 
 @brief (MAT24_SUBOCTAD_WEIGHTS >> x) & 1 is halved weight of suboctad x (mod 2). 
*/
#define MAT24_SUBOCTAD_WEIGHTS %{hex:Mat24_suboctad_weights}ULL



/**
 @def mat24_def_lsbit24(v1) 
 @brief Macro version of function ``mat24_lsbit24``.
*/
#define mat24_def_lsbit24(v1) \
   MAT24_LSBIT_TABLE[((((v1) & (0 - (v1))) * %{Mat24_lsbit_const}) >> 26) & 0x1f]



/**
 @def mat24_def_lsbit24_pwr2(v1) 
 @brief Special macro version of function ``mat24_lsbit24``.

 This is faster than ``mat24_def_lsbit24``, but here
 ``v1`` must be  power of two. 
*/
#define mat24_def_lsbit24_pwr2(v1) \
   MAT24_LSBIT_TABLE[(((v1) * %{Mat24_lsbit_const}) >> 26) & 0x1f]


/**
 @def mat24_def_parity12(v1) 
 @brief Parity of vector ``v1`` of 12 bits length.

 Generate a sequence of statements that replaces ``v1`` by
 the bit parity of ``v1 & 0xfff``. 
*/
#define mat24_def_parity12(v1)   v1 ^= v1 >> 6; \
   v1 ^= v1 >> 3; \
   v1 = (0x96 >> (v1 & 7)) & 1;



/**
  @def mat24_def_octad_to_gcode(o)
  @brief Eqivalent to ``mat24_def_octad_to_gcode(o)``

  ``mat24_def_octad_to_gcode(o)`` returns the  number 
  of the Golay code word corresponding to octad ``o``. 
  Parameter ``o`` is not checked.
*/
#define mat24_def_octad_to_gcode(o) (MAT24_OCT_DEC_TABLE[o])


/**
  @def  mat24_def_gcode_to_octad(v)
  @brief Eqivalent to ``mat24_def_gcode_to_octad(v)``

  ``mat24_def_gcode_to_octad(v)`` returns the  number of the
  octad corresponding to Golay code vector ``v``, with ``v``
  in ``gcode``. It returns garbage if ``v`` is not an octad. 
*/
#define mat24_def_gcode_to_octad(v) \
  (MAT24_OCT_ENC_TABLE[(v) & 0x7ff] >> 1) 


/**
  @def  mat24_def_not_nonstrict_octad(v)
  @brief Check if ``v`` (or its complement) is an octad.

  Returns 0 if ``v`` (or its complement) is an 
  octad and 1 otherwise.

  Vector ``v`` must be given in ``gcode`` representation
*/
#define mat24_def_not_nonstrict_octad(v) \
    (MAT24_OCT_ENC_TABLE[(v) & 0x7ff] >> 15)


/** 
  @def  mat24_def_gcode_to_vect(v)
  @brief Convert Golay code element number ``v`` to a vector in ``GF(2)^24``

  Macro version of function ``mat24_gcode_to_vect``.
*/
#define mat24_def_gcode_to_vect(v) \
    (MAT24_DEC_TABLE1[((v) << 4) & 0xf0]   \
          ^ MAT24_DEC_TABLE2[((v) >> 4) & 0xff])



/** 
  @def  mat24_def_syndrome_from_table(t)
  @brief Convert entry ``t`` of table ``MAT24_SYNDROME_TABLE`` to syndrome

  An entry ``t`` of the table ``MAT24_SYNDROME_TABLE`` encodes an odd
  cocode syndrome. The macro returns that syndrome as a bit vector.
*/
#define mat24_def_syndrome_from_table(t) \
    ((1UL << ((t) & 31)) ^ (1UL << (((t) >> 5) & 31)) \
        ^ (1UL << (((t) >> 10) & 31)))



/** 
  @def  mat24_def_suboctad_weight(u_sub)
  @brief Equivalent to mat24_suboctad_weight(u_sub)
*/
#define mat24_def_suboctad_weight(u_sub)\
    ((uint32_t)((MAT24_SUBOCTAD_WEIGHTS >> ((u_sub) & 0x3f)) & 1))

/*************************************************************************
***  Start of tables
*************************************************************************/

// %%GEN h

/// @cond DO_NOT_DOCUMENT 
//  Do not document C functions in the header file!

// %%GEN ch
#ifdef __cplusplus
extern "C" {
#endif
// %%GEN c


/*************************************************************************
*** Table for finding lsbit
*************************************************************************/



/// @cond DO_NOT_DOCUMENT 


// %%EXPORT_TABLE p
const uint8_t MAT24_LSBIT_TABLE[32] = { 
// %%TABLE Mat24_lsbit_table, uint8
};


/// @endcond  


/*************************************************************************
*** Conversion between representations of GF(2)**24, Golay code, etc.
*************************************************************************/


/// @cond DO_NOT_DOCUMENT 

// %%EXPORT_TABLE p
const uint32_t MAT24_ENC_TABLE0[256] = {
// %%TABLE Mat24_enc_table0, uint32
};

// %%EXPORT_TABLE p
const uint32_t MAT24_ENC_TABLE1[256] = {
// %%TABLE Mat24_enc_table1, uint32
};

// %%EXPORT_TABLE p
const uint32_t MAT24_ENC_TABLE2[256] = {
// %%TABLE Mat24_enc_table2, uint32
};

// %%EXPORT_TABLE p
const uint32_t MAT24_DEC_TABLE0[256] = {
// %%TABLE Mat24_dec_table0, uint32
};

// %%EXPORT_TABLE p
const uint32_t MAT24_DEC_TABLE1[256] = {
// %%TABLE Mat24_dec_table1, uint32
};

// %%EXPORT_TABLE p
const uint32_t MAT24_DEC_TABLE2[256] = {
// %%TABLE Mat24_dec_table2, uint32
};



// The following table MAT24_BASIS contains the used basis of the 
// Golay cocode (12 bit vectors of type uint32_t) followed by the 
// used basis of the Golay code (12 bit vectors).

// %%EXPORT_TABLE p
const uint32_t MAT24_BASIS[24] = { 
// %%TABLE Mat24_basis, uint32
};

// %%EXPORT_TABLE p
const uint32_t MAT24_RECIP_BASIS[24+8] = { 
// %%TABLE Mat24_recip_basis, uint32
};

// %%EXPORT_TABLE p
const uint16_t MAT24_SYNDROME_TABLE[0x800] = { 
// %%TABLE Mat24_syndrome_table, uint16
};

/// @endcond 




/**
  @brief Table for converting ``octad`` to ``gcode`` representation

  The public macro ``mat24_def_octad_to_gcode`` uses this table
*/
// %%EXPORT_TABLE p
const uint16_t MAT24_OCT_DEC_TABLE[759] = { 
// %%TABLE Mat24_oct_dec_table, uint16
};

/**
 @brief Table for converting ``gcode`` to ``octad`` representation

 The public macro ``mat24_def_gcode_to_octad`` uses this table
*/
// %%EXPORT_TABLE p
const uint16_t MAT24_OCT_ENC_TABLE[2048] = { 
// %%TABLE Mat24_oct_enc_table, uint16
};


/** 
 @brief Table containing data about the Golay code.

 For ``0 <= d < 0x800`` entry ``d``  contains the following
 information the code word ``d``, with ``d`` in ``gcode``
 representation.

   Bit 11,...,0:   ``mat24_ploop_theta(d)``

   Bit 14,...,12:  Bit weight of code word ``d`` in ``GF(2)**24`` divided by 4

   Bit 15:         reserved

 We have ``d**2 = (-1)**<Bit 12 of entry d>`` for ``d`` in the Parker loop.
*/
// %%EXPORT_TABLE
const uint16_t MAT24_THETA_TABLE[] = { 
// %%TABLE Mat24_theta_table, uint16
};




/*************************************************************************
*** Table of entries of an octad.
*************************************************************************/



/**
  @var MAT24_OCTAD_ELEMENT_TABLE

  For ``0 <= i < 759``, the entries ``8*i,...8*i+7`` in the
  table ``MAT24_OCTAD_ELEMENT_TABLE`` are the bit positions of the
  octad with the number ``i``.
*/
// %%EXPORT_TABLE
const uint8_t MAT24_OCTAD_ELEMENT_TABLE[759*8] = { 
// %%TABLE Mat24_octad_table, uint8
};




/// @cond DO_NOT_DOCUMENT 

// %%EXPORT_TABLE
const uint8_t MAT24_OCTAD_INDEX_TABLE[64*4] = { 
// %%TABLE Mat24_octad_index_table, uint8
};


/// @endcond  





/*************************************************************************
***  End of tables
*************************************************************************/



// %%GEN ch
#ifdef __cplusplus
}
#endif
// %%GEN h

/// @endcond  
//  End condition: Do not document C functions in the header file!

// %%GEN c




// %%GEN h
/*************************************************************************
***  Static inline functions
*************************************************************************/

#ifdef __cplusplus
extern "C" {
#endif

/*************************************************************************
***  Conversion from and to suboctads
*************************************************************************/


/**
  @brief Convert even suboctad of octad  to cocode representation

  The function converts a suboctad ``u_sub`` (in ``suboctad``
  representation) of an octad ``u_octad`` (in ``octad``
  representation) to a cocode element. It returns that cocode
  element in ``cocode`` representation.

  The function returns 0xffffffff on any illegal input.
*/
static inline uint32_t
mat24_octad_suboctad_to_cocode(uint32_t u_sub, uint32_t u_octad)
{
    const uint8_t *p_octad = MAT24_OCTAD_ELEMENT_TABLE + (u_octad << 3);
    const uint8_t *p_sub = MAT24_OCTAD_INDEX_TABLE + ((u_sub & 0x3f) << 2);
    uint_fast32_t c;
    if (u_octad >= 759) return 0xffffffffULL;
    c = MAT24_RECIP_BASIS[p_octad[p_sub[0]]]
      ^ MAT24_RECIP_BASIS[p_octad[p_sub[1]]]
      ^ MAT24_RECIP_BASIS[p_octad[p_sub[2]]]
      ^ MAT24_RECIP_BASIS[p_octad[p_sub[3]]];
    return c & 0xfff;
}


/**
  @brief Inline version of function ``mat24_cocode_to_suboctad``
*/
static inline uint32_t
mat24_inline_cocode_to_suboctad(uint32_t c1, uint32_t v1, uint32_t u_strict)
{
    const uint8_t *p_octad;
    uint_fast32_t res = 0, t, syn, csyn, mask, j, oct_weight, oct;
    uint_fast32_t status = c1 >> 11;

    oct_weight = MAT24_OCT_ENC_TABLE[v1 & 0x7ff];
    status |= oct_weight >> 15;
    oct = oct_weight >> 1;
    if (status & 1) return 0xffffffffULL;
    p_octad = MAT24_OCTAD_ELEMENT_TABLE + (oct << 3);

    j = p_octad[0];
    syn = mask = 1UL << j;
    // Let ``syn`` be the cocode syndrome of c1 as subset of the octad
    t = MAT24_SYNDROME_TABLE[(c1 ^ MAT24_RECIP_BASIS[j]) & 0x7ff ];
    syn ^= mat24_def_syndrome_from_table(t);
    j =  p_octad[7];
    mask |= (1UL << j);
    csyn = syn ^ (0 - ((syn >> j) & 1UL)); // zero high bit of suboctad
    // %%FOR* i in range(6)
    j =  p_octad[%{int:i+1}];
    mask |= 1UL << j;
    res ^= ((csyn >> j) & 1UL) << %{i};
    // %%END FOR
    status = (oct_weight ^ mat24_def_suboctad_weight(res)) & u_strict & 1;
    status |= syn & ~mask; 
    return status ? 0xffffffffUL : (oct << 6) + res;
}



#ifdef __cplusplus
}
#endif


// %%GEN c

