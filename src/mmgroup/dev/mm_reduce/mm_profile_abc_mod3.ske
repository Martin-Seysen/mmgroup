/** @file mm_profile_abc_mod3.c

* **Basic operation of this module**

The centralizer of the
fourgroup \f$V_4 = \{1, x_{-1}, x_{\Omega}, x_{-\Omega}\}\f$ in the
Monster is a group \f$N_{xyz}\f$ of structure \f$2^{2+11+22}.M_{24}\f$.
Let \f$N_2 := O_2(N_{xyz})\f$ be the normal subgroup of \f$N_{xyz}\f$
of structure \f$2^{2+11+22}\f$.
Let \f$\rho_3\f$ be the standard 196884-dimensional rational
representation \f$\rho\f$ of the Monster with entries taken modulo 3.
We mainly deal with vectors \f$v \in \rho_3\f$ as that are 2A axes.
The purpose of this module is to watermark the orbits of 2A axes under
the action of the group \f$N_{xyz}\f$. We may also watermark orbits
under the action of a few specific subgroups of \f$N_{xyz}\f$.

Given a vector \f$v\f$ as above, the functions in this module first
compute a symmetric \f$24 \times 24\f$ matrix \f$M = M(v)\f$ that is
invariant under the centralizer of \f$v\f$ in \f$N_{xyz}\f$, and also 
under \f$N_2\f$. Here the factor group \f$M_{24} = N_{xyz} / N_2\f$
acts naturally on the space of symmetric \f$24 \times 24\f$ matrices
as a permutation group. As a first step, information from the 
parts 'A', 'B', 'C' of a vector \f$v \in \rho_3\f$ is used to
obtain \f$M(v)\f$. These parts of a vector are described in
Section *The representation of the Monster group* in 
the *API reference*. Note that these parts are already 
symmetric \f$24 \times 24\f$  matrices. The group \f$N_{2}\f$ acts
on the triple  ('A', 'B' + 'C', 'B' - 'C') by sign changes; and the
factor group \f$M_{24}\f$ acts on each entry of that triple naturally
as a permutation group on 24 elements, up to sign. By stripping off
sign information and merging the corresponing entries of these matrices
we obtain a first approximation \f$M_0 = M_0(v)\f$ of \f$M(v)\f$ that
is invariant under \f$N_{2}\f$.  By construction, \f$M_0(v)\f$ is also
invariant under the centralizer of  \f$v\f$. 

Matrix \f$M_0\f$ can be considered as an undirected
labelled graph, with vertices labelled by the diagonal elements and
edges labelled by off-diagonal elements of \f$M_0\f$. We may refine
the labelling of \f$M_0\f$ by assigning a new label to each
orbit of a vertex or edge under the action of the isomorphism group
of the labelled graph corresponding to \f$M_0\f$. The matrix with such
a refined labelling is still invariant under the action of the 
centralizer of \f$v\f$. Computing the full isomorphism group of the
graph would take too much time; but we may do a few steps in that
direction in order to refine the watermarking. This way we compute a
matrix \f$M = M(v)\f$ that refines the labelling given by \f$M_0\f$.

From \f$M(v)\f$ we also want to compute a data
structure \f$H = H(v)\f$ that watermarks the orbit of \f$v\f$ under
the action of \f$N_{xyz}\f$. For a suitably refined labelled graph
\f$M(v)\f$ we may assume that the multiset of labels of all edges
incident to a vertex depends on the label of the vertex only. So the
multiset of labels of the vertices can be used as a watermark for
the orbit of \f$v\f$. It turns out that this multiset can be stored
in a \f$24 \times 24\f$ matrix. Some details of this construction are
given in the documentation of file ``mm_profile_graph24.c``.

Function ``mm_profile_mod3_load`` computes the triple
('A', 'B' + 'C', 'B' - 'C') from the vector \f$v\f$  of the
representation of the Monster. Function ``mm_profile_mod3_hash``
computes the matrices \f$M(v)\f$ and \f$H(v)\f$ from that triple.
It also computes a 63-bit hash value over the matrix \f$H(v)\f$.


* **Extensions**

From \f$v\f$ we may compute \f$M(w)\f$ and \f$H(w)\f$ for 
\f$w = v \cdot \tau^e x_\delta^f\f$, for any
odd cocode element \f$x_\delta\f$, without computing \f$w\f$.
(These matrices are invariant
under \f$x_\delta\f$ for \f$\delta\f$ even).
Here the arguments \f$e\f$ and \f$f\f$ are passed to
function ``mm_profile_mod3_load``.

We may also watermark orbits of \f$v\f$ under the action of a
few fixed subgroups \f$N'\f$ of \f$N_{xyz}\f$.
Parameter ``mode`` of function ``mm_profile_mod3_hash``
allows to specify a subgroup  \f$N'\f$ of
\f$N_{xyz}\f$, such that the computed matrix ``M`` will be
invariant under the centralizer of \f$v\f$ in \f$N'\f$ only.
Here \f$N'\f$ is the subgroup of \f$N\f$ centralizing a set
\f$\{x_\delta \mid \delta \in S\}\f$ of 2A involutions
pointwise, where \f$S\f$ is a set of Golay cocode words
depending of parameter ``mode``. Legal values for ``mode`` are:

<table>
<caption>
Subgroups \f$N'\f$ of \f$N_{xyz}\f$ supported
</caption>
<tr>
   <th> mode
   <th> \f$N'\f$ centralizes \f$\{x_\delta \mid \delta \in S\}\f$
</tr>
<tr>
   <td> 0
   <td> \f$S = \{ \}\f$, i.e. \f$N' = N_{xyz}\f$
</tr>
<tr>
   <td> 1
   <td> \f$S = \{ [2,3] \}\f$
</tr>
<tr>
   <td> 2
   <td> \f$S = \{ [1,2], [2,3] \}\f$
</tr>
</table>





* **Warning**
 
The functions in this module may differ between versions!

They are desigend for the internal needs of the *mmgroup* package.
*/





/************************************************************************
Internal structure of array loaded by function ``mm_profile_mod3_load``

Function ``mm_profile_mod3_load`` loads entries of a vector \f$v\f$ of
the representation of the Monster into an array ``a`` of length 72. For
the end user the structure of the array is opaque and hence undocumented.
The information loaded from vector \f$v\f$ corresponds to the 
triple  ('A', 'B' + 'C', 'B' - 'C') , where 'A', 'B' and 'C' are
24 times 24 subarrays of vector `\f$v\f$ as documented in Section
*The representation of the Monster group* in the *API reference*.
All entries are stored modulo 3.

In the documentation of this file, the triple  ('A', 'B'+'C', 'B'-'C')
loaded into array ``a`` will be called a *block*.

Internally, the function stores parts 'A' of the 
vectors \f$v \cdot\tau^e\f$, for  \f$e = 0, 1, 2\f$ (modulo 3)
in the array referred by ``a``. Throughout this file we 
abbreviate the part 'A' of  \f$v \cdot\tau^e\f$ stored in a block
referred by ``a`` to ``A[e;]``. We write ``A[e;i,j]`` for
entry ``i,j`` of  ``A[e;]``.

In the block ``a`` the entry ``A[e;i,j]``is stored in bits
``(2*j+1, 2*j)`` of entry ``a[24*e + i]``. Such an entry is also
called a *dibit*.
************************************************************************/




/// @cond DO_NOT_DOCUMENT
#include <string.h>

#include "mat24_functions.h"
#include "mm_basics.h"
#include "mm_op_p.h"
#include "mmgroup_generators.h"
#include "clifford12.h"
#include "mm_reduce.h"
/// @endcond



//  %%GEN h
/// @cond DO_NOT_DOCUMENT
//  %%GEN c


/************************************************************************
** Auxiliary functions 
************************************************************************/

/// @cond DO_NOT_DOCUMENT 

/** 
  @brief Reduce dibits in the array ``a`` of length 72 modulo 3.
*/
static inline void _reduce(uint64_t *a) {
    uint64_t w, i;
    for (i = 0; i < 72; ++i) { 
        w = (a[i] & (a[i] >> 1)) & 0x5555555555555555ULL;
        a[i] = (a[i] ^ w ^ (w << 1)) & 0xffffffffffffULL;
    }
}



/** 
  @brief Re-encode dibits in the 64-bit integer ``w``.

  Dibits are mapped as 00 -> 00, 01 -> 01, 10 -> 11, 11 -> 00.
  Thus, modulo 3, the low bit acts as a 'nonzero' flag, and the
  high bit acts as a 'negative' flag. 

  The macro uses a temporary 64-bit integer ``t``.
*/
#define adjust_sign(w, t) \
    t = w & (w << 1) & 0xaaaaaaaaaaaaaaaaULL; \
    w = w ^ ((w >> 1) & 0x5555555555555555ULL) ^ t  



/** 
  @brief Load parts ABC of representation of Monster modulo 3

  Let ``v`` point to a vector of the representation \f$\rho_{p}\f$
  of the Monster, with \f$p\f$ given by parameter ``p``. The function
  load parts 'A', 'B', and 'C' of that vector (in that order) into
  the vector of length 3 * 24 referred by ``a``. Entries of
  vector ``a`` are encoded as in representation  \f$\rho_{3}\f$.
  The function returns 0 in case of success and -1 in case of failure.
 
*/
static inline int32_t
mm_profile_mod3_load_abc(uint32_t p, uint_mmv_t *v, uint64_t *a)
{
    uint64_t m[3*24], i, len24 = mm_aux_v24_ints(p);
    if (len24 == 0 || len24 > 4) return -1;
    for (i = 0; i < 3 * 24; i += 24) {
        if (mm_op_load_leech3matrix(p, v + i*len24, m) < 0) return -2;
        leech3matrix_compress(m, m);
        memcpy(a + i, m, 24 * sizeof(uint64_t));
    }
    _reduce(a);
    return 0;
}




/// @endcond 

/************************************************************************
** Load part A, B, C mod 3 from vector of representation of Monster
************************************************************************/




/** 
  @brief Load parts of a representation representation of the Monster

  Let ``v`` point to a vector of the representation \f$\rho_{p}\f$
  of the Monster, with \f$p\f$ given by parameter ``p``. The function
  loads the triple of the parts ('A', 'B+C', 'B-C')  of that vector
  into the array of length 72 referred by ``a``, as described in the
  header of this file.
  The function returns 0 in case of success and -1 in case of failure.
  Legal values for \f$p\f$ are 3 and 15.

  A nonzero value ``t`` is interpreted as follows:

  Before loading the vector ``v``, multiply it with \f$\tau^f\f$,
  where \f$f\f$ is ``(t / 2) & 3``. If ``t`` is odd then multiply ``v``
  with \f$x_\delta\f$ afterwards, where  \f$\delta\f$ is any odd
  Golay cocode element. All these multiplications are done
  internally, without changing the input vector ``v``.
*/
// %%EXPORT px
int32_t mm_profile_mod3_load(uint32_t p, uint_mmv_t *v, uint64_t *a, uint32_t t)
{
    uint64_t m[72], e = (t >> 1) & 3;
    if (mm_profile_mod3_load_abc(p, v, m) < 0)  return -1;

    memcpy(a + 24 * ((3 - e) % 3), m, 24 * sizeof(uint64_t));
    mm_op3_t_ABC(m, 1);
    memcpy(a + 24 * ((4 - e) % 3), m, 24 * sizeof(uint64_t));
    mm_op3_t_ABC(m, 1);
    memcpy(a + 24 * ((5 - e) % 3), m, 24 * sizeof(uint64_t));
    if (t & 1) {
        memcpy(m, a+24, 24 * sizeof(uint64_t));
        memcpy(a+24, a+48, 24 * sizeof(uint64_t));
        memcpy(a+48, m, 24 * sizeof(uint64_t));
    }
    _reduce(a);
    return 0;
}



/************************************************************************
** Adjust signs for our profiling
************************************************************************/


/// @cond DO_NOT_DOCUMENT


/** @brief Compute profile from result of function ``mm_profile_mod3_load``

In this function parameter ``a`` must must be an array of length 72, 
containg a block for a vector \f$v \in \rho_{3}\f$, as computed by
function ``mm_profile_mod3_load``. We take notation from the comment
at the beginning of this file. Let ``A[e;i,j]`` be as in that comment.

From that block the function computes a *basic profile* of the block
stores it in the buffer referred by ``b``.
The basic profile is a 24 time 24 matrix ``b``, where each entry is
computed from the correponding three entries of ``A[e;]``, e = 0, 1, 2. 
In case ``i != j`` we store 1 in bit ``e`` of ``b[i,j]``
if ``A[e;i,j] != 0`` and 0 otherwise. We put ``b[i,i] = A[e;i,i]``. We
remark that entries ``A[e;i,i]`` are equal for all ``e``.
For ``i != j``  we store 1 in bit 3 of ``b[i,j]`` 
if ``A[0;i,j] == A[1;i,j] == A[2;i,j] == -1`` holds modulo 3, and 0
otherwise. So that bit encodes the sign
of ``A[0;i,j] * A[1;i,j] * A[2;i,j]`` (modulo 3), if all three
factors of that product are nonzero.
All other bits of the entries ``b[i,j]`` are set to 0.
From the operation of \f$N_2\f$ on \f$\rho\f$ we may deduce that
matrix ``b`` is invariant under the action of \f$N_2\f$.
 
Buffer ``b`` must have size 24 * 24, with entry ``i, j`` of 
matrix ``b`` stored in ``b[24] * i + j``.
*/
static inline void block_mod3_to_profile(uint64_t *a, uint16_t *b)
{
    uint64_t i, j, t0, t1, t2, x;
    for (i = 0; i < 24; ++i) {
        t0 = a[i]; adjust_sign(t0, x);
        t1 = a[i+24]; adjust_sign(t1, x);
        t2 = a[i+48]; adjust_sign(t2, x);
        for (j = 0; j < 24; ++j) {
            x = (((t0 ^ t1 ^ t2) >> 1) & t0 & t1 & t2 & 1) << 3;
            x += (t0 & 1) + ((t1 & 1) << 1) + ((t2 & 1) << 2);
            b[j] = (uint8_t)(x);
            t0 >>= 2; t1 >>= 2; t2 >>= 2;
        }
        b[i] = (uint8_t)((a[i] >> (2*i)) & 3);
        b += 24;
    } 
}






/** @brief Refine profile from function ``mm_profile_mod3_load``

Let parameter ``a`` be as obtained from function ``block_mod3_to_profile``;
and take notation from the comment at the beginning of this file.

After calling function ``block_mod3_to_profile``, the entry ``b[i,j]``
is constructed from entries ``A[e;i,j]``, ``e = 0, 1, 2`` by stripping
off some sign information from these enries. In some cases we want to
profile an orbit under a subgroup \f$N'\f$ of \f$N_{xyz}\f$, as
indicated by parameter ``mode`` in function ``mm_profile_mod3_hash``.
In such a case it might not be necessary to strip off any signs for
constructing entry ``b[i,j]`` for keeping invariance of the vector
under the action of \f$N'\f$. Here this function can be used to
restore the full information obtained from entries  ``A[e;i,j]`` for
all ``e`` in entry ``b[i,j]``.
*/
static inline void 
block_mod3_augment(uint64_t *a, uint16_t *b, uint32_t i, uint32_t j)
{
    uint64_t t0, t1, t2, x;
    t0 = (a[i] >> 2*j) & 3; adjust_sign(t0, x);
    t1 = (a[i+24] >> 2*j) & 3; adjust_sign(t1, x);
    t2 = (a[i+48] >> 2*j) & 3; adjust_sign(t2, x);
    x = t0 + (t1 << 2) + (t2 << 4) + 0x40;
    b[24*i + j] = b[24*j + i] = (uint8_t)x;
}




/// @endcond





/************************************************************************
** Compute a hash value over a 24 times 24 matrix ``b``
************************************************************************/

/// @cond DO_NOT_DOCUMENT 

#define HASH_MULTIPLIER  ((uint64_t)0x4f1bbcdcbfa53ffbULL)




static inline int64_t hash(uint16_t *b)
// Return a 63-bit hash value of the 24 times 24 matrix ``b``
{
    uint64_t h = 0ULL, j;
    for (j = 0; j < 576; ++j)  h = h * HASH_MULTIPLIER + b[j];
    return (int64_t)(h & 0x7fffffffffffffffULL);
}


/// @endcond 



/************************************************************************
** New sort and hash
************************************************************************/



/** @brief Watermark orbit of a vector in the representation of the Monster

Let ``a`` refer to an array of length 72 containing the output of
function `` mm_profile_mod3_load``. That output is a triple of the
parts (‘A’, ‘B+C’, ‘B-C’) of a vector \f$v\f$ in the representation
of the Monster (modulo 3), as described in the documentation in
the header of this file.

From this input the function computes the matrices ``M`` and ``H``,
as described in the header of this file. The function returns a
63-bit hash value of matrix ``H`` in case of success and a negative
value in case of failure. The matrix ``H`` and its hash value may be
used to watermark the orbit of \f$v\f$ under the action of the
group \f$N_{xyz}\f$.

Output array ``b`` must have size 2 * 24 * 24. Entry ``i, j`` of
matrix ``M`` is stored in ``b[24 * i + j]``.  Entry ``i, j`` of
matrix ``H`` is stored in ``b[24*24 + 24 * i + j]``.

If is ``mode`` is zero then the computed matrix ``H`` watermarks the
orbit of \f$v\f$ under the action of \f$N_{xyz}\f$. In case
``mode = 1, 2`` the matrix ``H`` watermarks the orbit of \f$v\f$ under
the action of a subgroup of \f$N_{xyz}\f$, as described in the
header of this file.
*/
// %%EXPORT px
int64_t mm_profile_mod3_hash(uint64_t *a, uint16_t *b, uint32_t mode)
{
    // uint_fast32_t i, j;
    uint16_t *h = b + 24*24;
    block_mod3_to_profile(a, b);
    switch(mode) {
        case 2:
            // In this mode rows and columns 1,2,3, are fixed pointwise
            block_mod3_augment(a, b, 1, 2);
            block_mod3_augment(a, b, 1, 3);
            block_mod3_augment(a, b, 2, 3);
            b[25 * 1] |= 0x4; b[25 * 2] |= 0x8; b[25 * 3] |= 0xc; 
            break;
        case 1:
            // In this mode rows and columns 2,3, are fixed as a set
            block_mod3_augment(a, b, 2, 3);
            b[25 * 2] |= 0x4; b[25 * 3] |= 0x4; 
            break;
        case 0:
            break;
        default:
            return -1;
    }
    mm_profile_graph24(b);
    return hash(h);
}

/************************************************************************
** permute a 24 time 24 matrix with a permutation
************************************************************************/



/** @brief Permute rows and columns 24 times 24 matrix

    Permute the rows and columns of the 24 times 24 matrix ``b``
    with permutation ``p`` and store result in buffer ``b1``.
    Entry ``i, j`` of a matrix is stored at index ``24 * i + j``.
    Buffers ``b`` and ``b1`` have size 24 * 24; these buffers
    may overlap.

    The function returns 0 in case of success and a negative value
    in case of failure, e.g. if ``p`` is not a legal permutation.
*/
// %%EXPORT px
int32_t mm_profile_mod3_permute24(uint16_t *b, uint8_t *p, uint16_t *b1)
{
    uint16_t c[576];
    uint_fast32_t bmap = 0, i, j;
    for (i = 0; i < 24; ++i) {
        if (p[i] >= 24) return -1;
        bmap |= 1UL << p[i];
    }
    if (bmap != 0xffffffUL) return-2;
    for (i = 0; i < 24; ++i) {
        for (j = 0; j < 24; ++j) {
            c[24*p[i] + p[j]] = b[24*i + j];
        }
    }
    memcpy(b1, c, 576 * sizeof(uint16_t));
    return 0;
}



//  %%GEN h
/// @endcond 
//  %%GEN c
