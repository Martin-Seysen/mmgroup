/** @file mm%{P}_op_xi.c

 File ``mm%{P}_op_xi.c`` implements the operation of the element
 \f$\xi^e\f$ of the monster group on a vector in the
 representation \f$\rho_{%{P}}\f$ of the monster.

 Here the generator \f$\xi\f$ of the monster group is defined as 
 in section **The monster group** of the **API reference**.

 The representation \f$\rho_{%{P}}\f$ is equal to the
 196884-dimensional representation  \f$\rho\f$ of the monster,
 with coefficients taken modulo %{P}, as defined in
 section **The representation of the monster group**
 in the **API reference**.

 An element of \f$\rho_{%{P}}\f$ is implemented as an array of
 integers of type ``uint_mmv_t`` as described in
 section **Description of the mmgroup.mm extension**
 in this document.

 We have \f$\xi^3 = 1\f$, and the opration of \f$\xi^e, e = 1,2\f$
 on \f$\rho\f$ is given in [Seysen19], section 9.4 - 9.6. The
 non-monomial part of the operation of \f$\xi^e\f$ can be decomposed
 into a product of monomial matrices and matrices containing
 blocks of \f$2 \times 2\f$ Hadamard matrices. We use the Python
 functions and classes in files ``hadamard_codegen.py`` and
 ``hadamard_xi.py`` in subdirectory ``mmgroup/dev/hadamard`` for
 generating C code that implements the products of Hadamard
 matrices corresponding to the generator \f$\xi^e\f$.

 Although the monomial part of the operation of \f$\xi^e\f$ is
 described in [Seysen19], we have not found an easy way to 
 convert that description to a C function. So we use (rather
 large) tables for implementing these operations. The C file
 ``mm_tables_xi.c`` contains these tables as static arrays and
 also an array ``mm_sub_table_xi`` that provides public 
 access to these tables. The same tables are used for the
 operations on \f$\rho_p\f$ for all characteritics \f$p\f$. 
*/

#include <string.h>
#include "mat24_functions.h"
#include "mm_op%{P}.h"   

// %%EXPORT_KWD MM_OP%{P}_API


//  %%GEN h
/// @cond DO_NOT_DOCUMENT 
//  %%GEN c



// %%IF* GENERATE_CODE

/// @cond DO_NOT_DOCUMENT 

static void mm_op%{P}_xi_mon(
    uint_mmv_t * v_in,  
    uint32_t exp1, 
    uint_mmv_t * v_out
)
{
    // Caution: this uses v_out[MM_OP%{P}_OFS_Z:] as temporary storage
    uint_mmv_t *p_src, *p_dest;
    uint_fast32_t i, j;
    uint_fast32_t diff = exp1 ? %{OP_XI_TABLE_DIFF} : 0;
    uint8_t *b =  (uint8_t*)(v_out + MM_OP%{P}_OFS_Z), *p_b;
    mm_sub_table_xi_type *p_tables = mm_sub_table_xi[exp1];
    uint16_t *p_perm;
    uint32_t *p_sign;


    // %%FOR* i, i_src, i_dest, comment  in OP_XI_TABLE_INFO

    ///////////////////////////////////////////////////////////////
    %{comment}
    ///////////////////////////////////////////////////////////////
    p_src = v_in + %{i_src.START};
    // %%IF* i_src.OP_DIFF
    p_src %{i_src.OP_DIFF}= diff;
    // %%END IF
    p_dest = v_out + %{i_dest.START};
    // %%IF* i_dest.OP_DIFF
    p_dest %{i_dest.OP_DIFF}= diff;
    // %%END IF
    p_sign = p_tables[%{i}].p_sign;
    p_perm = p_tables[%{i}].p_perm;

    for (i = 0; i < %{i_src.SHAPE[0]}; ++i) {
        p_b = b;
        
        for (j = 0; j < %{i_src.SHAPE[1]}; ++j) {
           // %%OP_XI_LOAD p_src, p_b, %{i_src.SHAPE[2]}, uint8_t
           p_src += %{V24_INTS};
           p_b += 32;
        }
        
        for (j = 0; j < %{i_dest.SHAPE[1]}; ++j) {
           // %%OP_XI_STORE b, p_perm, p_sign, p_dest, %{i_dest.SHAPE[2]}
           p_dest += %{V24_INTS};
           p_perm += %{i_dest.SHAPE[2]};
           p_sign += 1;
        }
        
    }
    // %%END FOR
}

static uint_mmv_t TAB%{P}_XI64_MASK[] = {
// %%TABLE TABLE_MUL_MATRIX_XI64, uint%{INT_BITS}
};


#define HALF_YZ_SHIFT %{int:LOG_V24_INTS+10}

static uint32_t TAB%{P}_XI64_OFFSET[2][4] = {
    {
        MM_OP%{P}_OFS_Z + (2 << HALF_YZ_SHIFT),
        MM_OP%{P}_OFS_Z + (0 << HALF_YZ_SHIFT),
        MM_OP%{P}_OFS_Z + (1 << HALF_YZ_SHIFT),
        MM_OP%{P}_OFS_Z + (3 << HALF_YZ_SHIFT)
    },
    {
        MM_OP%{P}_OFS_Z + (1 << HALF_YZ_SHIFT),
        MM_OP%{P}_OFS_Z + (2 << HALF_YZ_SHIFT),
        MM_OP%{P}_OFS_Z + (0 << HALF_YZ_SHIFT),
        MM_OP%{P}_OFS_Z + (3 << HALF_YZ_SHIFT)
    },
};




static void mm_op%{P}_xi_yz(uint_mmv_t *v_in,  uint32_t exp1, uint_mmv_t *v_out)
{
    uint_fast32_t i1;
    uint_mmv_t *p_mask =  TAB%{P}_XI64_MASK + exp1;
    for (i1 = 0; i1 < 64; ++i1) {
        // %%MUL_MATRIX_XI64 v_in, p_mask, v_out
    }
}  


static void mm_op%{P}_xi_a(uint_mmv_t *v_in,  uint32_t exp1, uint_mmv_t *v_out)
{
    uint_fast32_t i1;
    uint_mmv_t e_mask =  0 - ((uint_mmv_t)exp1 & %{hex:1});
    for (i1 = 0; i1 < 6; ++i1) {
        // %%MUL_MATRIX_XI16 v_in, e_mask, v_out
    }
}  

/// @endcond 

// %%END IF   # GENERATE_CODE

/**
  @brief Compute an operation of the monster group on a vector

  Let ``v_in`` be a vector of the representation \f$\rho_{%{P}}\f$
  of the monster group.

  The function implements the operation of the element \f$\xi^e\f$ 
  of the monster group  on a vector ``v_in`` in the 
  representation \f$\rho_{%{P}}\f$ of the monster.

  Parameter ``exp`` is the exponent \f$e\f$ of the generator 
  \f$\xi^e\f$. The function computes the operation of \f$\xi^e\f$  
  on the input  vector ``v_in`` and  stores the result in the output 
  vector ``v_out.`` 

  Input vector  ``v_in`` is not changed.
*/
// %%EXPORT px
void mm_op%{P}_xi(uint_mmv_t *v_in,  uint32_t exp, uint_mmv_t *v_out)
{
    uint_mmv_t i;
    uint32_t exp1;

  // %%IF* GENERATE_CODE 
    exp %= 3;
    if (exp == 0) {
        for (i = 0; i < %{MMV_INTS}; ++i) v_out[i] = v_in[i];
        return;
    }
    exp1 =  exp - 1;

    // Do monomial part, i.e. tags B, C, T, X
    // Caution: this uses v_out[MM_OP%{P}_OFS_Z:] as temporary storage
    mm_op%{P}_xi_mon(v_in, exp1, v_out);

    // Do tag A
    mm_op%{P}_xi_a(v_in, exp1, v_out); 

    // Do tags X, Y
    for (i = 0; i < 4; ++i) {
        uint_mmv_t *p_src = v_in + MM_OP%{P}_OFS_Z + (i << HALF_YZ_SHIFT);
        mm_op%{P}_xi_yz(p_src, exp1, v_out + TAB%{P}_XI64_OFFSET[exp1][i]);
    }
  // %%END IF # GENERATE_CODE    
}

/**
  @brief Restriction of function ``mm_op%{P}_xi`` to tag ``A``

  Function ``mm_op%{P}_xi`` computes a certain operation of the
  monster group on a vector ``v_in``. That operation depends
  on a parameter ``exp``.
  
  Function ``mm_op%{P}_xi_tag_A`` computes the same
  operation on the entries of the vector ``v = v_in`` with
  tag ``A`` only, and ignores the other entries of ``v``.
  See section **The representation of the monster group**
  in the **API reference** for tags of entries of a vector in
  the representation of the monster.

  The function overwrites the vector ``v`` with the result.
  Here only entries of ``v`` with tag ``A`` are changed. This 
  function is much faster than function ``mm_op%{P}_xy``.
*/
// %%EXPORT px
void mm_op%{P}_xi_tag_A(uint_mmv_t *v,  uint32_t exp)
{
    uint_mmv_t v_tmp[24 * %{V24_INTS}];
    uint_fast32_t i;
    
    exp %= 3;
    if (exp == 0) return;
    mm_op%{P}_xi_a(v, exp - 1, v_tmp);
    for (i = 0; i < 24 * %{V24_INTS}; ++i) v[i] = v_tmp[i];
}


//  %%GEN h
/// @endcond 
//  %%GEN c
