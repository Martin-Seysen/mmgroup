// %%COMMENT
// TODO: Yet to be documented!!!


#include <string.h>
#include "mat24_functions.h"
#include "mm_op{P}.h"   


static void mm_op{P}_xi_mon(
    uint_mmv_t * v_in,  
    uint32_t exp1, 
    uint_mmv_t * v_out
)
{
    // Caution: this uses v_out[MM_OP{P}_OFS_Z:] as temporary storage
    uint_mmv_t *p_src, *p_dest;
    uint_fast32_t i, j;
    uint_fast32_t diff = exp1 ? {OP_XI_TABLE_DIFF} : 0;
    uint8_t *b =  (uint8_t*)(v_out + MM_OP{P}_OFS_Z), *p_b;
    mm_sub_table_xi_type *p_tables = mm_sub_table_xi[exp1];
    uint16_t *p_perm;
    uint32_t *p_sign;


    // %%FOR* i, i_src, i_dest, comment  in OP_XI_TABLE_INFO

    ///////////////////////////////////////////////////////////////
    {comment}
    ///////////////////////////////////////////////////////////////
    p_src = v_in + {i_src.START};
    // %%IF* i_src.OP_DIFF
    p_src {i_src.OP_DIFF}= diff;
    // %%END IF
    p_dest = v_out + {i_dest.START};
    // %%IF* i_dest.OP_DIFF
    p_dest {i_dest.OP_DIFF}= diff;
    // %%END IF
    p_sign = p_tables[{i}].p_sign;
    p_perm = p_tables[{i}].p_perm;

    for (i = 0; i < {i_src.SHAPE[0]}; ++i) {
        p_b = b;
        
        for (j = 0; j < {i_src.SHAPE[1]}; ++j) {
           // %%OP_XI_LOAD p_src, p_b, {i_src.SHAPE[2]}, uint8_t
           p_src += {V24_INTS};
           p_b += 32;
        }
        
        for (j = 0; j < {i_dest.SHAPE[1]}; ++j) {
           // %%OP_XI_STORE b, p_perm, p_sign, p_dest, {i_dest.SHAPE[2]}
           p_dest += {V24_INTS};
           p_perm += {i_dest.SHAPE[2]};
           p_sign += 1;
        }
        
    }
    // %%END FOR
}

static uint_mmv_t TAB{P}_XI64_MASK[] = {
// %%TABLE TABLE_MUL_MATRIX_XI64, uint{INT_BITS}
};


#define HALF_YZ_SHIFT {int:LOG_V24_INTS+10}

static uint32_t TAB{P}_XI64_OFFSET[2][4] = {
    {
        MM_OP{P}_OFS_Z + (2 << HALF_YZ_SHIFT),
        MM_OP{P}_OFS_Z + (0 << HALF_YZ_SHIFT),
        MM_OP{P}_OFS_Z + (1 << HALF_YZ_SHIFT),
        MM_OP{P}_OFS_Z + (3 << HALF_YZ_SHIFT)
    },
    {
        MM_OP{P}_OFS_Z + (1 << HALF_YZ_SHIFT),
        MM_OP{P}_OFS_Z + (2 << HALF_YZ_SHIFT),
        MM_OP{P}_OFS_Z + (0 << HALF_YZ_SHIFT),
        MM_OP{P}_OFS_Z + (3 << HALF_YZ_SHIFT)
    },
};




static void mm_op{P}_xi_yz(uint_mmv_t *v_in,  uint32_t exp1, uint_mmv_t *v_out)
{
    uint_fast32_t i;
    uint_mmv_t *p_mask =  TAB{P}_XI64_MASK + exp1;
    for (i = 0; i < 64; ++i) {
        // %%MUL_MATRIX_XI64 v_in, p_mask, v_out
    }
}  


static void mm_op{P}_xi_a(uint_mmv_t *v_in,  uint32_t exp1, uint_mmv_t *v_out)
{
    uint_fast32_t i;
    uint_mmv_t e_mask =  0 - ((uint_mmv_t)exp1 & {hex:1});
    for (i = 0; i < 6; ++i) {
        // %%MUL_MATRIX_XI16 v_in, e_mask, v_out
    }
}  


// %%EXPORT p
void mm_op{P}_xi(uint_mmv_t *v_in,  uint32_t exp, uint_mmv_t *v_out)
{
    uint_mmv_t i;
    uint32_t exp1;
 
    exp %= 3;
    if (exp == 0) {
        for (i = 0; i < {MMV_INTS}; ++i) v_out[i] = v_in[i];
        return;
    }
    exp1 =  exp - 1;

    // Do monomial part, i.e. tags B, C, T, X
    // Caution: this uses v_out[MM_OP{P}_OFS_Z:] as temporary storage
    mm_op{P}_xi_mon(v_in, exp1, v_out);

    // Do tag A
    mm_op{P}_xi_a(v_in, exp1, v_out); 

    // Do tags X, Y
    for (i = 0; i < 4; ++i) {
        uint_mmv_t *p_src = v_in + MM_OP{P}_OFS_Z + (i << HALF_YZ_SHIFT);
        mm_op{P}_xi_yz(p_src, exp1, v_out + TAB{P}_XI64_OFFSET[exp1][i]);
    }
    
}


