// %%COMMENT
// TODO: Yet to be documented!!!


#include <string.h>
#include "mat24_functions.h"
#include "mm_op%{P}.h"   

//  %%GEN h
/// @cond DO_NOT_DOCUMENT 
//  %%GEN c

// %%IF* GENERATE_CODE

static void invert%{P}_xyz(uint_mmv_t *v_in, uint_mmv_t *v_out)
{
    uint_fast32_t i;
    const uint16_t *p_theta = MAT24_THETA_TABLE;
    
    for (i = 0; i <2048; ++i) {
        uint_mmv_t mask = 0 - ((uint_mmv_t)(((p_theta[i] >> 12) & %{hex:1})));
        // %%IF* V24_INTS_USED > 1
        mask &= %{smask:P};
        // %%END IF
        // %%FOR* j in range(V24_INTS_USED)
        // %%IF* j == V24_INTS_USED - 1 and 24 % INT_FIELDS
        mask &= %{smask:P, range(24 % INT_FIELDS)};
        // %%END IF
        *v_out++ = *v_in++ ^ mask;
        // %%END FOR
        // %%FOR* j in range(V24_INTS_USED, V24_INTS)
        *v_out++ = 0;
        ++v_in;
        // %%END FOR
    }
}

// %%END IF  # GENERATE_CODE


// %%EXPORT px
void mm_op%{P}_t(uint_mmv_t *v_in,  uint32_t exp, uint_mmv_t *v_out)
{
    uint_mmv_t i, j, exp1;
 
  // %%IF* GENERATE_CODE
    exp %= 3;
    if (exp == 0) {
        for (i = 0; i < %{MMV_INTS}; ++i) v_out[i] = v_in[i];
        return;
    }
    exp1 = %{hex:1} - (uint_mmv_t)exp;

    // Do off-diagonal part of tags A, B, C
    // %%IF* 24 % INT_FIELDS 
    for (i = 0; i < %{int:24*V24_INTS}; ++i) {
        // %%MUL_MATRIX_T3 v_in, exp1, v_out
        ++v_in; ++v_out;
    }
    // %%ELSE
    for (i = 0; i < 24; ++i) {
        for (j = 0; j < %{V24_INTS_USED}; ++j) {
            // %%MUL_MATRIX_T3 v_in, exp1, v_out
            ++v_in; ++v_out;
        }
        // %%FOR* j in range(V24_INTS - V24_INTS_USED) 
        ++v_in;
        *v_out++ = 0;
        // %%END FOR
    }
    // %%END IF

    v_in -= %{int:24*V24_INTS};
    v_out -= %{int:24*V24_INTS};
    // Do diagonal part of tags A, B, C
    for (i = 0; i < 24; ++i) {
        // Copy diagonal of A, zero diagonals of B and C
        uint_mmv_t mask = %{hex:P} << ((i << %{LOG_FIELD_BITS}) & %{int:INT_BITS-1});
        j = (i << %{LOG_V24_INTS}) + (i >> %{LOG_INT_FIELDS});
        v_out[j] = (v_out[j] & ~mask) | (v_in[j] & mask);
        v_out[j + %{int:24*V24_INTS}] &= ~mask;
        v_out[j + %{int:48*V24_INTS}] &= ~mask;
        // %%IF* 24 % INT_FIELDS 
        // Zero slack
        j = ((i + 1) << %{LOG_V24_INTS}) - 1;
        v_out[j] &= %{smask:P, range(24 % INT_FIELDS)};
        v_out[j + %{int:24*V24_INTS}] &= %{smask:P, range(24 % INT_FIELDS)};
        v_out[j + %{int:48*V24_INTS}] &= %{smask:P, range(24 % INT_FIELDS)};  
        // %%END IF    
    }


    // Do tag T
    v_in += MM_OP%{P}_OFS_T;
    v_out +=  MM_OP%{P}_OFS_T;
    for (i = 0; i < 759; ++i) {
        // %%MUL_MATRIX_T64 v_in, exp1, v_out
        v_in += %{V64_INTS};
        v_out += %{V64_INTS};
    }

    // Do tags X, Y, and Z
    {
         uint_mmv_t *pXYin, *pYZin, *pZXin;
         uint_mmv_t *pXYout, *pYZout, *pZXout;
         if (exp1 == 0) {
             pXYin = v_in; 
             pXYout = v_out + %{int:V24_INTS << 12};  
             pYZin = v_in + %{int:V24_INTS << 12}; 
             pYZout = v_out + %{int:V24_INTS << 11};  
             pZXin = v_in + %{int:V24_INTS << 11}; 
             pZXout = v_out; 
         } else {
             pXYout = v_out; 
             pXYin = v_in + %{int:V24_INTS << 12};  
             pYZout = v_out + %{int:V24_INTS << 12}; 
             pYZin = v_in + %{int:V24_INTS << 11};  
             pZXout = v_out + %{int:V24_INTS << 11}; 
             pZXin = v_in; 
         }

         // Map X to Y for t and Y to X for t**2
         for (i = 0; i < %{int:V24_INTS << 11}; ++i) pXYout[i] = pXYin[i];
         mm_op%{P}_neg_scalprod_d_i(pXYout);
         
         // Map Y to Z for t and Z to Y for t**2
         invert%{P}_xyz(pYZin, pYZout);
         mm_op%{P}_neg_scalprod_d_i(pYZout);

         // Map Z to X for t and X to Z for t**2
         invert%{P}_xyz(pZXin, pZXout);
    }
  // %%END IF  # GENERATE_CODE
}




// %%EXPORT px
void mm_op%{P}_t_A(uint_mmv_t *v_in,  uint32_t exp, uint_mmv_t *v_out)
{
    uint_mmv_t i, j, exp1;
 
  // %%IF* GENERATE_CODE
    exp %= 3;
    if (exp == 0) {
        for (i = 0; i < %{int:24*V24_INTS}; ++i) v_out[i] = v_in[i];
        return;
    }
    exp1 = %{hex:1} - (uint_mmv_t)exp;
    for (i = 0; i < %{int:24*V24_INTS}; ++i) {
        // %%MUL_MATRIX_T3A v_in, exp1, v_out
        ++v_in; ++v_out;
    }

    v_in -= %{int:24*V24_INTS};
    v_out -= %{int:24*V24_INTS};
    // Do diagonal part of tag A
    for (i = 0; i < 24; ++i) {
        // Copy diagonal of A, zero diagonals of B and C
        uint_mmv_t mask = %{hex:P} << ((i << %{LOG_FIELD_BITS}) & %{int:INT_BITS-1});
        j = (i << %{LOG_V24_INTS}) + (i >> %{LOG_INT_FIELDS});
        v_out[j] = (v_out[j] & ~mask) | (v_in[j] & mask);
        // %%IF* 24 % INT_FIELDS 
        // Zero slack
        j = ((i + 1) << %{LOG_V24_INTS}) - 1;
        v_out[j] &= %{smask:P, range(24 % INT_FIELDS)};
        // %%END IF    
    } 
  // %%END IF  # GENERATE_CODE
}



//  %%GEN h
/// @endcond 
//  %%GEN c


