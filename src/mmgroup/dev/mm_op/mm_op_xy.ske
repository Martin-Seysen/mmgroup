
// %%COMMENT
// TODO: Adjust this to new order of basis vectors rep!!!

#include <string.h>
#include "mm_op{P}.h"   
   


// %%IF* GENERATE_CODE


static const uint_mmv_t TABLE_PERM64_LOW[] = {
   // %%TABLE TABLE_PERM64_XY_LOW, uint{INT_BITS}
}; 


static const uint_mmv_t TABLE_PERM64_HIGH[] = {
   // %%TABLE TABLE_PERM64_XY_HIGH, uint{INT_BITS}
}; 


static const uint32_t TABLE24_START[4] = {
   MM_OP{P}_OFS_X, MM_OP{P}_OFS_Z, MM_OP{P}_OFS_Y, MM_OP{P}_OFS_A
};


// %%END IF #  GENERATE_CODE


// %%EXPORT
void mm_op{P}_do_xy(uint_mmv_t *v_in, mm_sub_op_xy_type *p_op, uint_mmv_t *v_out)
{
    uint_fast32_t i;

  // %%IF* GENERATE_CODE
    for (i = 0; i < MM_OP{P}_OFS_E; ++i) v_out[i] = 0;
    
    // Step 1: do rows with 24 entries 
    {
        uint32_t table24_dest[3];
        // TODO: comment properly!!!!
        for (i = 0; i < 3; ++i) table24_dest[i] = TABLE24_START[i];
        i = (TABLE24_START[1] ^ TABLE24_START[2]) & 
            (0 - ((p_op->eps >> 11) & 1));
        table24_dest[1] ^= i;  table24_dest[2] ^= i; 

        for (i = 0; i < 3; ++i)  {
            uint_mmv_t *p_src = v_in + TABLE24_START[i];
            uint_mmv_t *p_dest = v_out + table24_dest[i];
            uint_fast32_t i1;
            uint_mmv_t a_sign[2][{V24_INTS}];
            uint_mmv_t d_xor = p_op->lin_d[i];
            uint8_t *p_sign = p_op->sign_XYZ;
    
            for (i1 = 0; i1 < {V24_INTS_USED}; ++i1) {
                uint_mmv_t x = p_op->lin_i[i] >> (i1 << {LOG_INT_FIELDS}); 
                // %%MMV_UINT_SPREAD x, x
                a_sign[0][i1] = x;
                a_sign[1][i1] = x ^ {smask:P};
            }
            // %%IF* 24 % {INT_FIELDS}
            a_sign[1][{int:V24_INTS_USED-1}] &= {smask:P, range(24 % INT_FIELDS)};
            // %%END IF
         
            for (i1 = 0; i1 < 2048; ++i1) {
                uint_mmv_t *ps = p_src + ((i1 ^ d_xor) << {LOG_V24_INTS});
                uint_fast8_t sign = (p_sign[i1] >> i) & 1;
                // %%FOR j in range(V24_INTS_USED)
                p_dest[{j}] = ps[{j}] ^ a_sign[sign][{j}];
                // %%END FOR
                // %%FOR* i in range(V24_INTS_USED, V24_INTS)
                p_dest[{i}] = 0;
                // %%END FOR
                p_dest +=  {V24_INTS};      
            }
        }    
    }    

    // Step 2: do rows with 64 entries, tag T // TODO: comment properly!!!!
    {
        uint_mmv_t *p_src = v_in + MM_OP{P}_OFS_T;
        uint_mmv_t *p_dest = v_out + MM_OP{P}_OFS_T;
        uint16_t* p_T =  p_op->s_T;
        for (i = 0; i < 759; ++i) {
            uint_fast16_t ofs_l = *p_T;
            uint_fast16_t ofs_h = (ofs_l & 63) >> {LOG_INT_FIELDS};
            const uint_mmv_t *ps_h = TABLE_PERM64_HIGH +
                ((ofs_l & 0xf000) >> {int:12-LOG_V64_INTS});
            const uint_mmv_t *ps_l = TABLE_PERM64_LOW + 
                ((ofs_l & 0xf00) >> {int:8-LOG_V64_INTS});
            ofs_l = (ofs_l << {LOG_FIELD_BITS}) & {hex:INT_BITS-1};
            // %%FOR j in range(V64_INTS)
            p_dest[{j}] =  ps_h[{j}] ^ ps_l[{j}] ^
            // %%JOIN* " ^", ";"
            // %%FOR* k in range(0, INT_BITS, FIELD_BITS)
               (((p_src[{j} ^ ofs_h] >> ({k} ^ ofs_l)) & {P}) << {k})
            // %%END FOR 
            // %%END FOR
            p_src += {V64_INTS}; 
            p_dest += {V64_INTS}; 
            ++p_T;
        }
    }


    // Step 3: do rows with 24 entries, tags A, B, C // TODO: comment properly!!!!
    {
        uint_mmv_t mask[{int:4*V24_INTS}];
        uint_mmv_t neg_mask[{V24_INTS}];
        uint_mmv_t f = p_op->f_i, ef = p_op->ef_i, eps;
        for (i = 0; i < {V24_INTS_USED}; ++i) {
             mask[i] = f >> (i << {LOG_INT_FIELDS});
             mask[i + {V24_INTS}] = ef >> (i << {LOG_INT_FIELDS});
        }
        // %%FOR* i in range(V24_INTS)
        // %%IF* i >= V24_INTS_USED
        neg_mask[{i}] = 0;
        // %%ELSE IF i < V24_INTS_USED - 1 or 24 % INT_FIELDS == 0
        neg_mask[{i}] = {smask: P};
        // %%ELSE
        neg_mask[{i}] = {smask: P, range(24 % INT_FIELDS)};
        // %%END IF
        // %%END FOR
        for (i = 0; i < {int:2*V24_INTS}; ++i) {
            uint_mmv_t x = mask[i];
            // %%MMV_UINT_SPREAD x, x
            mask[i] = x = x & neg_mask[i & {int:V24_INTS-1}];
            mask[i + {int:2*V24_INTS}] = x ^ neg_mask[i & {int:V24_INTS-1}];
        }

        f <<= {int:LOG_V24_INTS +1};
        ef <<= {int:LOG_V24_INTS +1};
        eps = 0 - ((p_op->eps >> 11) & {hex:1});
        for (i = 0; i < {int:24*V24_INTS}; i += {V24_INTS}) {
            uint_mmv_t t, t1, t2;
            // %%FOR j in range(V24_INTS_USED)
            // process uint_mmv_t {j} of row i/{V24_INTS} for tags A, B, C
            t1 = v_in[i + MM_OP{P}_OFS_A + {j}]; 
            t = mask[{j} + (f & {hex:2*V24_INTS})];
            v_out[i + MM_OP{P}_OFS_A + {j}] = t1 ^ t; 
            t1 = v_in[i + MM_OP{P}_OFS_B + {j}]; 
            t2 = v_in[i + MM_OP{P}_OFS_C + {j}];
            t &= (t1 ^ t2);
            t ^= mask[{int:j+V24_INTS} + (ef & {hex:2*V24_INTS})];
            v_out[i + MM_OP{P}_OFS_B + {j}] = t1 ^ t;
            t2 ^= eps & neg_mask[{j}];
            v_out[i + MM_OP{P}_OFS_C + {j}] = t2 ^ t;
            // %%END FOR
            // %%FOR* j in range(V24_INTS_USED, V24_INTS)
            v_out[i + MM_OP{P}_OFS_A + {j}] = 0;
            v_out[i + MM_OP{P}_OFS_B + {j}] = 0;
            v_out[i + MM_OP{P}_OFS_C + {j}] = 0;
            // %%END FOR
            f >>= 1; ef >>= 1;      
        }
        //yet to be done!!!!
    }



    // If eps is odd: 
    //    negate entries X_d,i with scalar product <d,i> = 1
    if (p_op->eps & 0x800) mm{P}_neg_scalprod_d_i(v_out + MM_OP{P}_OFS_X); 
  // %%END IF # GENERATE_CODE
} 





// %%EXPORT px
void mm_op{P}_xy(uint_mmv_t *v_in, uint32_t f, uint32_t e, uint32_t eps, uint_mmv_t *v_out)
{
  // %%IF* GENERATE_CODE
    mm_sub_op_xy_type s_op;
    mm_sub_prep_xy(f, e, eps, &s_op);
    mm_op{P}_do_xy(v_in, &s_op, v_out);
  // %%END IF   # GENERATE_CODE
}


