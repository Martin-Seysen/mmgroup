// %%GEN h


/** @file mm_op%{P}.h

 The header file ``mm_op%{P}.h`` contains basic definitions for the
 C files dealing with  vectors of the 198884-dimensional representation
 of the monster group modulo %{P},
 as described in  *The C interface of the mmgroup project*,
 section *Description of the mmgroup.mm extension*.


 The header file also contains prototypes for the C files in
 the ``mm%{P}`` extension.  This  extension comprises the
 files ``mm%{P}_op_misc.c``, ``mm%{P}_op_pi.c``, ``mm%{P}_op_t.c``,
 ``mm%{P}_op_word.c``, ``mm%{P}_op_xi.c``, ``mm%{P}_op_xy.c``.

// %%IF* P in [3, 15]
 For characteristic p = %{P} this includes also the files
 ``mm15_op_rank_A.c``, 
// %%IF* P in [15]
 ``mm15_op_eval_A.c``, ``mm15_op_eval_X.c``,
// %%END IF
// %%END IF

*/

/// @cond DO_NOT_DOCUMENT 


#define MM_OP%{P}_DLL  // We want a DLL!!


// Generic helper definitions for shared library support
#if defined _WIN32 || defined __CYGWIN__
  #define MM_OP%{P}_HELPER_DLL_IMPORT __declspec(dllimport)
  #define MM_OP%{P}_HELPER_DLL_EXPORT __declspec(dllexport)
  #define MM_OP%{P}_HELPER_DLL_LOCAL
#else
  #if __GNUC__ >= 4
    #define MM_OP%{P}_HELPER_DLL_IMPORT __attribute__ ((visibility ("default")))
    #define MM_OP%{P}_HELPER_DLL_EXPORT __attribute__ ((visibility ("default")))
    #define MM_OP%{P}_HELPER_DLL_LOCAL  __attribute__ ((visibility ("hidden")))
  #else
    #define MM_OP%{P}_HELPER_DLL_IMPORT
    #define MM_OP%{P}_HELPER_DLL_EXPORT
    #define MM_OP%{P}_HELPER_DLL_LOCAL
  #endif
#endif


// Now we use the generic helper definitions above to define MM_OP%{P}_API 
// and MM_OP%{P}_LOCAL.
// MM_OP%{P}_API is used for the public API symbols. It either DLL imports 
// or DLL exports (or does nothing for static build). 
// MM_OP%{P}_LOCAL is used for non-api symbols.

#ifdef MM_OP%{P}_DLL // defined if MM_BASICS is compiled as a DLL
  #ifdef MM_OP%{P}_DLL_EXPORTS // defined if we are building the MM_BASICS DLL 
                           // (instead of using it)
    #define MM_OP%{P}_API MM_OP%{P}_HELPER_DLL_EXPORT
  #else
    #define MM_OP%{P}_API MM_OP%{P}_HELPER_DLL_IMPORT
  #endif // MM_OP%{P}_DLL_EXPORTS
  #define MM_OP%{P}_LOCAL MM_OP%{P}_HELPER_DLL_LOCAL
#else // MM_OP%{P}_DLL is not defined: this means MM_BASICS is a static lib.
  #define MM_OP%{P}_API
  #define MM_OP%{P}_LOCAL
#endif // MM_OP%{P}_DLL




/// @endcond  



/** 
  This enumeration contains the  offsets for the tags ``A,B,C,T,X,Z,Y``
  in a vector in the 196884-dimensional representation of the monster,
  stored in the internal representation.

  This is similar to enum MM_AUX_OFS in file ``mm_basics.h``. But 
  here the offsets are given in units of %{INT_BITS}-bit integers
  for a vector of the  representation \f$\rho_{%{P}}\f$ of the
  monster group in characteristic  %{P}.
*/
enum MM_OP%{P}_OFS  {
 MM_OP%{P}_OFS_A = (MM_AUX_OFS_A >> %{LOG_INT_FIELDS}), /**< Offset for tag A */
 MM_OP%{P}_OFS_B = (MM_AUX_OFS_B >> %{LOG_INT_FIELDS}), /**< Offset for tag B */   
 MM_OP%{P}_OFS_C = (MM_AUX_OFS_C >> %{LOG_INT_FIELDS}), /**< Offset for tag C */    
 MM_OP%{P}_OFS_T = (MM_AUX_OFS_T >> %{LOG_INT_FIELDS}), /**< Offset for tag T */  
 MM_OP%{P}_OFS_X = (MM_AUX_OFS_X >> %{LOG_INT_FIELDS}), /**< Offset for tag X */   
 MM_OP%{P}_OFS_Z = (MM_AUX_OFS_Z >> %{LOG_INT_FIELDS}), /**< Offset for tag Z */   
 MM_OP%{P}_OFS_Y = (MM_AUX_OFS_Y >> %{LOG_INT_FIELDS}), /**< Offset for tag Y */    
 MM_OP%{P}_LEN_V = (MM_AUX_LEN_V >> %{LOG_INT_FIELDS}), /**< Total length of the internal representation */    
};
                                  
