/** @file gen_union_find.c
The functions in file ``gen_union_find.c`` implement a union-find
algorithm. These function are used in module ``gen_ufind_lin2.c``.
*/


/*************************************************************************
** External references 
*************************************************************************/

/// @cond DO_NOT_DOCUMENT
#include <stdlib.h> 
#include <string.h>
#include "mat24_functions.h"
#define MMGROUP_GENERATORS_INTERN
#include "mmgroup_generators.h"
#include "clifford12.h"
/// @endcond 






// %%GEN ch
#ifdef __cplusplus
extern "C" {
#endif
// %%GEN c




/*************************************************************************
** Error codes 
*************************************************************************/

// %%GEN h

/**
  @enum gen_ufind_error_type
  @brief Error codes for functions in this module

  Unless otherwise stated, the functions in modules ``gen_union_find.c``, 
  and ``gen_ufind_lin2.c``  return nonnegative values
  in case of success and negative values in case of failure. 
  Negative return values mean error codes as follows:

  
*/
enum gen_ufind_error_type
{
ERR_GEN_UFIND_MEM        = -1, ///< Out of memory
ERR_GEN_UFIND_UF_LARGE   = -2, ///< Too many entries for union-find algorithm
ERR_GEN_UFIND_IN_LARGE   = -3, ///< Input parameter too large
ERR_GEN_UFIND_OUT_SHORT  = -4, ///< Output buffer too short
ERR_GEN_UFIND_ENTRY_UF   = -5, ///< Entry not in union-find table
ERR_GEN_UFIND_TABLE_UF   = -6, ///< Union-find table too large
ERR_GEN_UFIND_LIN2_DIM   = -7, ///< Dimension n of GF(2)^n is 0 or too large
ERR_GEN_UFIND_LIN2_GEN   = -8, ///< Too many generators for subgroup of SL_2(2)^n
ERR_GEN_UFIND_INVERSE    = -9, ///< Generator matrix is not invertible
ERR_GEN_UFIND_STATE     = -10, ///< Main buffer is not in correct state for this function
ERR_GEN_UFIND_DUPL      = -11, ///< Duplicate entry in union-find table

ERR_GEN_UFIND_INT_TABLE = -100, ///< -100 .. -199 are internal errors in module gen_union_find.c
ERR_GEN_UFIND_INT_LIN2  = -200, ///< -200 .. -299 are internal errors in module gen_ufind_lin2.c

};

// %%GEN c


/// @cond DO_NOT_DOCUMENT

static inline int32_t
check_out_buf32(uint32_t *p_buf, uint32_t len, uint32_t min_len)
{
     if (p_buf == NULL || min_len & 0x80000000UL || len < min_len)
        return ERR_GEN_UFIND_OUT_SHORT;
     return 0;
}
/// @endcond 


//  %%GEN h
/// @cond DO_NOT_DOCUMENT 
//  %%GEN c



/*************************************************************************
** The union-find algorithm 
*************************************************************************/





/** @brief Initialize table for union-find algorithm

The function initializes an array referred by parameter ``table``
for performing a union-find algorithm on the set ``S(length)`` of
integers ``i`` with ``0 <= i < length``. Array ``table`` must have
size ``length``. Here ``0 <= length <= 0x40000000``must hold.

Then ``table`` will store a partition of the set ``S(length)``
in an internal format. Initially, that partition consists of
singletons. One may use function ``gen_ufind_union`` for joining
two sets of that partition. Any set in the partition is
represented by an element of that set. The rules for computing
a representative of a set are not disclosed to the user.
You may use function ``gen_ufind_find`` for finding the
representative of a set. After calling
function ``gen_ufind_find_all_min`` each set is represented by
its smallest element. The representative of a set may change
after calling function ``gen_ufind_union``.

The function returns 0 in case of success, and a negative value
in case of failure (e.g. if ``length`` is too big.)
*/
// %%EXPORT px
int32_t gen_ufind_init(uint32_t * table, uint32_t length)
{
     uint32_t i;
     if (length > 0x40000000) return ERR_GEN_UFIND_UF_LARGE;
     for (i = 0; i < length; ++i) table[i] = 0x80000000;
     return 0;
}







/** @brief The find function for the union-find algorithm

Let ``S(length)`` be the set of integers ``i`` with ``0 <= i < length``;
and let a partition of ``S(length)`` be stored in the array ``table``
(of size ``length``) as described in function ``gen_ufind_init``.

The function returns the representative of the set containing the
integer ``n``. It returns a negative number in case of failure,
e.g. if ``n >= length``.
*/
// %%EXPORT px
int32_t gen_ufind_find(uint32_t *table, uint32_t length, uint32_t n)
{
     uint32_t u = n, p, gp;
     if (length > 0x40000000UL) return ERR_GEN_UFIND_TABLE_UF;
     if (n >= length) return ERR_GEN_UFIND_ENTRY_UF;
 
     p = table[u];
     while ((p & 0x80000000UL) == 0) {
         if (p >= length) return ERR_GEN_UFIND_INT_TABLE - 1;
         gp = table[p];
         if (gp & 0x80000000UL) return p;
         table[u] = gp;
         u = gp;
         if (u >= length) return ERR_GEN_UFIND_INT_TABLE - 2;
         p = table[u];
     }
     return u;
}





/** @brief The union function for the union-find algorithm

Let ``S(length)`` be the set of integers ``i`` with ``0 <= i < length``;
and let a partition of ``S(length)`` be stored in the array ``table``
(of size ``length``) as described in function ``gen_ufind_init``.

The function joins the sets in the partition containg the
elements ``n1`` and ``n2``.

The function returns 1 if the function unites two dijoint sets, 0 if not,
and 0x80000001 in case of any error. So we may 'or' the return values to
several calls to this function to check if the partition has been changed
or an error has occurred.

*/
// %%EXPORT px
uint32_t gen_ufind_union(uint32_t * table, uint32_t length, uint32_t n1, uint32_t n2)
{
     uint32_t u1 = n1, u2 = n2, p1, p2, gp1, gp2;
     if (length > 0x40000000UL || n1 >= length || n2 >= length) return 0x80000001UL;

     p1 = table[u1];
     while ((p1 & 0x80000000UL) == 0) {
         if (p1 >= length) return 0x80000001UL;
         gp1 = table[p1];
         if (gp1 & 0x80000000UL) {
             u1 = p1; p1 = gp1;
             break;
         }
         if (u1 >= length) return 0x80000001UL;
         table[u1] = gp1;
         u1 = gp1;
         p1 = table[u1];
     }
     // u1 = find(n1); p1 = rank(tree(n1)) + CONST

     p2 = table[u2];
     while ((p2 & 0x80000000UL) == 0) {
         if (p2 >= length) return  0x80000001UL;
         gp2 = table[p2];
         if (gp2 & 0x80000000UL) {
             u2 = p2; p2 = gp2;
             break;
         }
         if (u2 >= length) return  0x80000001UL;
         table[u2] = gp2;
         u2 = gp2;
         p2 = table[u2];
     }
     // u2 = find(n1); p2 = rank(tree(n1)) + CONST

     if (u1 == u2) return 0; // n1 and n2 are in the same set

     if (p1 <= p2) {
         table[u1] = u2;
         if (p1 == p2) ++table[u2];
     } else {
         table[u2] = u1;
     }
     return 1;
}




   
  


/** @brief Choose smallest representatives for sets in union-find algorithm

Let ``S(length)`` be the set of integers ``i`` with ``0 <= i < length``;
and let a partition of ``S(length)`` be stored in the array ``table``
(of size ``length``) as described in function ``gen_ufind_init``.

The function chooses the smallest element of a set in a partition
as the representative of the set. Thus a subsequent call to
function ``gen_ufind_find`` with parameter ``n`` returns the
smallest element of the set containg ``n``.

The function returns the number of the sets in the partition.
A negative return value indicates a error the array ``table``.
*/
// %%EXPORT px
int32_t gen_ufind_find_all_min(uint32_t *table, uint32_t length)
{
    uint32_t n, u, p, mu, u1, gp, res = 0;

    if (length > 0x40000000UL) return ERR_GEN_UFIND_TABLE_UF;
     
    // Map all elements of a set S to the representative u(S) of S;
    // and map u(S) to 0xc0000000 + mu, where mu = min(S). Ignore
    // all singletons S = {u}. A singleton is  mapped to 0x80000000.
    for (n = 0; n < length; ++n) {
        u = mu = n; 
        p = table[u];
        res += p >> 31;
        if (p == 0x80000000UL) continue;
        while ((p & 0x80000000UL) == 0) {
            mu = mu < p ? mu : p;
            u = p;
            if (u >= length) {
                 u = 0x40000000UL;
                 goto table_stuck;
            }
            p = table[u];
        }
        if ((p & 0xc0000000UL) == 0xc0000000UL) {
            p &= 0x3fffffffUL;
            mu = mu < p ? mu : p;
        }
        table[u] = mu | 0xc0000000UL; 
 table_stuck:
        u1 = n;
        p = table[u1];
        while ((p & 0xc0000000UL) == 0) {
            table[u1] = u;
            u1 = p;
            p = table[u1];
        }
    }

    // Map all elements of a set S to min(S); and map min(S) to
    // 0x80000001. We have min(S) = table[u(s)] & 0x3fffffff.
    // Ignore all singletons S.
    for (n = 0; n < length; ++n) {
        u = n; 
        p = table[u];
        if (p & 0x80000000UL) {
            if ((p & 0x40000000UL) == 0) continue;
            p &= 0x3fffffffUL;
            if (p >= length) {
                table[u] = 0x40000000UL;
                continue;
            }
            table[u] = p;
            table[p] = 0x80000001;
            continue;
        }
        gp = table[p];
        if (gp & 0x80000000UL) {
            if ((gp & 0x40000000UL) == 0) continue;
            gp &= 0x3fffffffUL;
        }
        if (gp >= length) {
            table[p] = 0x40000000UL;
            continue;
        }
        table[u] = table[p] = gp;
        table[gp] = 0x80000001;
    }

    // Return number of sets in partition 
    return res;
}






/** @brief Map entries of the partition to their representatives

Let ``S(length)`` be the set of integers ``i`` with ``0 <= i < length``;
and let a partition of ``S(length)`` be stored in the array ``table``
(of size ``length``) as described in function ``gen_ufind_init``.

Function ``gen_ufind_find_all_min`` must be called before calling this
function. Then this function computes an array ``map`` of the same length
as array ``table`` that maps each entry of the set ``S(length)`` to the
smallest element  of the partition stored in the array ``table``.

Output array ``map`` for storing that mapping must have size ``length``.

The function returns 0 in case of success and a negative
value in case of failure.
*/
// %%EXPORT px
int32_t gen_ufind_make_map(uint32_t *table, uint32_t length, uint32_t *map)
{
    uint32_t p, n;

    if (length > 0x40000000UL) return ERR_GEN_UFIND_TABLE_UF;

    for (n = 0; n < length; ++n) {            
        p = table[n];
        if (p & 0x80000000) {
            map[n] = n;
        } else if (p >= length) {
            // map[n] = 0xffffffffUL;
            return ERR_GEN_UFIND_INT_TABLE - 11;
        } else { 
            if (p >= n) return ERR_GEN_UFIND_INT_TABLE - 12;
            if ((table[p] & 0x80000000) == 0)
                return ERR_GEN_UFIND_INT_TABLE - 13;
            map[n] = p;
        }
    }
    return 0;
}






/** @brief Output the partition computed by the union-find algorithm

Let ``S(l_t)`` be the set of integers ``i`` with ``0 <= i < l_t``;
and let a partition of ``S(l_T)`` be stored in the array ``table``
(of size ``l_t``) as described in function ``gen_ufind_init``.

We assume that the partition stored in the array ``table``
contains ``n_sets`` sets. Then we store a list of lists in the
array ``map``, where each list corresponds to a set in
the partition. We write some index infomation for interpreting
these lists into the array ``ind`` of l ``l_ind``.

Array ``map`` will contain the ``l_t`` elements of the
set ``S(l_t)`` in such a way that for ``0 <= i < n_sets``
the ``i``-th set in the partition is equal to the set of
integers given by ``map[ind[i]], ...,  map[ind[i+1] - 1]``.

So the array ``ind`` must have size at least ``n_sets + 1``;
i.e. we must have ``l_ind > n_sets``. Array ``map`` must have
size ``l_t``; it may overlap with array ``table``.
Function ``gen_ufind_find_all_min`` must be called before calling
this function. Note that function ``gen_ufind_find_all_min``
returns ``n_sets`` in case of success.

The entries ``map[ind[i]], ...,  map[ind[i+1] - 1]``
corresponding to set in the partition are sorted. The sets of
the partition are sorted by their smallest elements.

The function returns ``n_set`` in case of success and a negative
value in case of failure.
*/
// %%EXPORT px
int32_t gen_ufind_partition(uint32_t *table, uint32_t l_t, uint32_t *map, uint32_t *ind, uint32_t l_ind)
{
    uint32_t *next, n, p, i=0, j, last, fst;
    int32_t status = -1;

    if (l_t > 0x40000000UL) return ERR_GEN_UFIND_TABLE_UF;
    next = malloc(sizeof(uint32_t) * (l_t + l_ind));
    if (next == NULL) return ERR_GEN_UFIND_MEM;

    // Here ``next`` is an array of l_t ``l_t + i.`` index ``i``
    // is incremented whenever we see a new set of the partition while
    // iterating though the ``table``. Eventually, ``i`` will be the
    // number of sets in the partition.

    // We will store the set {x_1, ..., x_m} with index ``j`` in the
    // arrays ``ind`` and ``next`` as shown in the following figure.
    // This peculiar scheme is dictated by the fact that array ``next``
    // is usually much larger than array ``ind``. Note that the original
    // information about the set is copied from ``table`` to ``ind``
    // and ``next``. In the ``table`` the enties ``x_i, i > 1`` contain
    // a pointer to ``x_1``; thus index ``j`` must be reachable from
    // the entry ``x_1`` stored in the array ``next``. Also we want 
    // the first entry ``x_1`` and the last entry ``x_m`` to be
    // reachable from the index ``j`` of the set  {x_1, ..., x_m}.
    
    //
    //  ind:     +--------------------j
    //           |                    ^
    //           |                    |
    //           v                    v
    //  next:   x_m  -->  x_1  -->  j + l_t  -->  x_2 --> x_3
    //           ^                                         |
    //           |____________ ............ _______________|

    for (n = 0; n < l_t; ++n) {
        p = table[n];                         // In case m = 1 we put:
        if (p & 0x80000000) {                 //   ind:            +----i 
            status = ERR_GEN_UFIND_INT_TABLE-21; //                |    |
            if (i >= l_ind) goto cleanup;     //                   v    |
            ind[i] = next[n] = l_t + i;       //   next: x_1  -->  i + l_t
            next[l_t + i] = n;                //          ^             |
            ++i;                              //          |_____________|
        } else {
            if (p >= l_t) continue;
            // Now ``n`` is the entry to be appended to the set with 
            // index ``j``; and  ``p`` is the first element of that set
            // (corresponding to ``x_1`` in the figure above).
            status = ERR_GEN_UFIND_INT_TABLE - 22;
            if (p >= n) goto cleanup;
            status = ERR_GEN_UFIND_INT_TABLE - 23;
            if ((table[p] & 0x80000000) == 0) goto cleanup;
            j = next[p] - l_t; // index of the set
            status = ERR_GEN_UFIND_INT_TABLE - 24;
            if (j >= i) goto cleanup;
            last = ind[j];        // old ``x_m`` in the figure above
            status =  ERR_GEN_UFIND_INT_TABLE - 25;
            if (next[last] != p) goto cleanup;
            // append ``n`` to the list [x_1, ..., x_m]
            ind[j] = next[last] = n;   
            next[n] = p;          // let ``n`` point to the 1st element       
        }
    }

    // Store the number of the sets in ``l_ind``.
    status = ERR_GEN_UFIND_INT_TABLE - 25;
    if (i >= l_ind) goto cleanup;
    l_ind = i;

    // Copy the elements of the sets from array ``next`` back to the
    // array ``map``, so the elements of the same set are adjacent.
    // Store index information for these sets in the array ``ind``.
    n = 0;
    for (i = 0; i < l_ind; ++i) {
        last = ind[i];        // Last element of the set
        ind[i] = n;           // Store index of the beginning of the set
        map[n++] = fst = next[last]; // store 1st element of the set
        p = next[l_t + i];    // 2nd element of the set or end marker
        while (p != fst) {    // Here  ``fst`` will be the end marker
            map[n++] = p;     // Fill ``map`` until end marker found
            p = next[p];
        } 
    }

    // Store total number of elements all sets in ``ind[l_ind]``.
    // Thus for ``0 <= j < l_ind``the j-th set contains the
    // elements ``map[k]``, for ``ind[j] <= k < ind[j+1].
    status = ERR_GEN_UFIND_INT_TABLE - 26;
    if (n > l_t) goto cleanup;
    ind[l_ind] = n;
    status = l_ind;      // return the number of the sets
    
cleanup:
    free(next);
    return status;

}

//  %%GEN h
/// @endcond 
//  %%GEN c



// %%GEN ch
#ifdef __cplusplus
}
#endif




