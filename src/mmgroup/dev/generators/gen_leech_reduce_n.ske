/** @file gen_leech_reduce_n.c
The functions in file ``gen_leech_reduce_n.c`` are yet to
be documented!!

We use the terminology defined in
the document *The C interface of the mmgroup project*, 
section *Description of the mmgroup.generators extension*.
*/


/*************************************************************************
** External references 
*************************************************************************/

/// @cond DO_NOT_DOCUMENT 
#include <string.h>
#include "mat24_functions.h"
#define MMGROUP_GENERATORS_INTERN
#include "mmgroup_generators.h"
/// @endcond 




// %%EXPORT_KWD MAT24_API


// %%GEN ch
#ifdef __cplusplus
extern "C" {
#endif
// %%GEN c


//  %%GEN h
/// @cond DO_NOT_DOCUMENT 
//  %%GEN c






/*************************************************************************
*** Auxiliary functions to find and apply permutations in Mat24
*************************************************************************/

/// @cond DO_NOT_DOCUMENT 

static uint8_t LSTD[8] = {0, 1, 2, 3, 4, 5, 6, 7};

static uint8_t OCTAD[7] = {0,1,2,3,4, 8,9};

static uint8_t DODECAD[12] = {0,4,8, 13,14,15, 17,18,19, 21,22,23};
static uint8_t CPL_DODECAD[12] = {1,2,3, 5,6,7, 9,10,11, 12,16,20};





/** @brief Find a suitable permutation for an octad.

  Similar to function ``find_octad_permutation``.
  Here ``v, o, c`` are as in that function; but the scalar
  product of ``o`` and ``c`` must be 1. Apart from that
  operation is as in function ``find_octad_permutation``.

  We compute a permutation that maps octad ``o`` to the standard
  octad (0,1,2,3,4,5,6,7). If the cocode part ``c`` of ``v`` is 
  not a suboctad of octad ``o`` then we map (one shortest 
  representative of) ``c`` into the set (0,1,2,3,...7,8). 
*/
static inline uint32_t find_octad_permutation_odd(uint32_t v, uint32_t *p_res)
{
    uint8_t src[8], sextet[24];
    uint32_t theta, w, vect, coc, syn, i, special;
    // Here ``v`` is a (possibly complemented) octad.
    // Put ``w = 0`` if v is an octad and ``w = 1`` otherwise.
    theta = MAT24_THETA_TABLE[(v >> 12) & 0x7ff];
    w = ((theta >> 13) ^ (v >> 23) ^ 1) & 1;
    // Store octad as a bit vector in ``vect``.
    vect = mat24_def_gcode_to_vect((v ^ (w << 23)) >> 12);
    // Store the first five entries of octad in ``src``.
    mat24_vect_to_list(vect, 5, src);
    // Let ``syn`` be the syndrome of the cocode part as a bit vector.
    // Put ``syn`` = 0xff000000 if the syndrome has bit weight 4.
    coc = (v ^  mat24_ploop_theta(v >> 12)) & 0xfff;
    syn = mat24_cocode_syndrome(coc, 24);
    // If syndrome has weight 4 then find the tetrad of the 
    // corresponding sextet intersecting with the octad in more 
    // than one entry. Store that tetrad in ``syn``.
    if (syn & 0xff000000) {
         mat24_cocode_to_sextet(coc, sextet);
         for (i = 0; i < 24; i += 4) {
             syn = (1 << sextet[i]) |  (1 << sextet[i+1])
                | (1 << sextet[i+2]) |  (1 << sextet[i+3]);
             special = syn & vect;
             if (vect & (vect - 1)) break;
         }
    }
    // revove entries of the octad from ``syn``. 
    syn &= ~vect;
    // Now ``syn`` is a singleton. Store that entry in src[5]
    src[5] = (uint8_t)(mat24_lsbit24(syn));  
    // Compute the permutation that maps the first 6 entries
    // of ``src`` to the entries given by ``OCTAD``.
    return apply_perm(v, src, OCTAD, 6, p_res);
}



/// @endcond  




/*************************************************************************
*** Start reducing Leech lattice vector modulo N_x0
*************************************************************************/

/** 
  @brief Compute permutation for **reducing** Leech lattice vector

  Given a vector ``v`` in the Leech lattice mod 2, in Leech
  lattice encoding, we want to find a standard representative 
  of the class \f$v N_{x0}\f$.

  The first step for obtaining such a representative is to compute
  a permutation  \f$\pi\f$ in the Mathieu group \f$M_{24}\f$ that
  maps \f$v\f$ to a standard form. This function writes such
  permutation (as a single generator of the monster group) into the
  integer referred by ``pg_out``. It returns the type of a
  vector ``v`` in the same way as in function ``gen_leech2_type``
  in module ``gen_leech.c``.

  Such a function is not strictly needed in the current version
  of the project, but implementing it elsewhere would lead to a
  lot of duplication.

  Here are some more details about the computed permutation \f$\pi\f$.

  Strictly speaking, \f$\pi\f$ is an automorphism of the Parker
  loop, but here we consider the action of \f$\pi\f$ as a
  permutation in \f$M_{24}\f$ only.

  Let \f$v = g + c\f$, where \f$g\f$  is the Golay code part
  of \f$v\f$, and \f$c\f$  is the cocode part  of \f$v\f$.
  Thus \f$g\f$ corresponds to an generator \f$x_d\f$, and \f$c\f$
  corresponds to a generator \f$x_\delta\f$ of the extraspecial
  2 group \f$Q_{x0}\f$.

  If \f$c\f$ is odd then \f$c\f$ is mapped to the cocode element
  ``(0)``, or ``(1,2,3)``, depending on its bit weight.

  For an even cocode element \f$c\f$ we proceed as follows:

  A dodecad \f$g\f$ is mapped to the standard
  dodecad ``(0,4,8, 13,14,15, 17,18,19, 21,22,23)``.

  Am octad \f$g\f$ is mapped to the standard
  octad ``(0,1,2,3,4,5,6,7)``. If ``c`` is not a suboctad of ``g``
  then we map (one shortest representative of) ``c`` into the
  set ``(0,1,2,3,4,5,6,7,8,9)``, using entry ``9`` only if the
  scalar product of ``o`` and ``c`` is 0.

  If \f$g \in \{0, \Omega\}\f$ then  \f$c\f$ is  is mapped to the
  cocode element ``(2,3)``, or to ``(0,1,2,3)``, or to zero,
  depending on its bit weight.
*/
// %%EXPORT px
int32_t gen_leech2_reduce_perm(uint32_t v, uint32_t *pg_out)
{
    int32_t vtype, subtype, res; 
    static uint8_t DODECAD[12] = {0,4,8, 13,14,15, 17,18,19, 21,22,23};

    vtype = gen_leech2_subtype(v);
    subtype = vtype & 0xf;
 
    *pg_out = 0xA0000000;    
    switch (subtype) {
        case 1:
        case 3:
        {
            uint8_t src[3];
            uint32_t coc, tab;
            coc = (v ^  mat24_ploop_theta(v >> 12)) & 0xfff;
            tab = MAT24_SYNDROME_TABLE[coc & 0x7ff];
            src[0] = tab & 31; src[1] = (tab >> 5) & 31;
            src[2] = (tab >> 10) & 31;
            if (src[1] < 24) res = apply_perm(v, src, LSTD+1, 3, pg_out);
            else res = apply_perm(v, src, LSTD, 1, pg_out);
            return res < 0 ? -1 : vtype;
        }
        case 6:
        {
            uint8_t pi[24], src[12];
            uint32_t vect = mat24_def_gcode_to_vect(v >> 12);
            mat24_vect_to_list(vect, 12, src);
            res = mat24_perm_from_dodecads(DODECAD, src, pi);
            if (res < 0) return -1;
            *pg_out = 0xA0000000 + mat24_perm_to_m24num(pi);
            return vtype;
        }
        case 2:
        case 4:
        {
            res = (vtype == 0x34) ? find_octad_permutation_odd(v, pg_out)
                                  : find_octad_permutation(v, pg_out);
            return res < 0 ? -1 : vtype;
        }
        case 0:
        {
            uint8_t src[4];
            uint32_t syn, j;
            if ((v & 0x7ff) == 0) return vtype;
            syn = mat24_cocode_syndrome(v & 0x7ff, 0);
            mat24_vect_to_list(syn, 4, src);
            j = mat24_bw24(syn) & 2;
            res = apply_perm(v, src, LSTD + j, 4 - j, pg_out);
            return res < 0 ? -1 : vtype;           
        }
        default:
            return vtype;
    } 
}




//  %%GEN h
/// @endcond 
//  %%GEN c



// %%GEN ch
#ifdef __cplusplus
}
#endif




